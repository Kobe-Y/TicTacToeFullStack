"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/pretty-bytes";
exports.ids = ["vendor-chunks/pretty-bytes"];
exports.modules = {

/***/ "(ssr)/./node_modules/pretty-bytes/index.js":
/*!********************************************!*\
  !*** ./node_modules/pretty-bytes/index.js ***!
  \********************************************/
/***/ ((module) => {

eval("\nconst BYTE_UNITS = [\n    \"B\",\n    \"kB\",\n    \"MB\",\n    \"GB\",\n    \"TB\",\n    \"PB\",\n    \"EB\",\n    \"ZB\",\n    \"YB\"\n];\nconst BIBYTE_UNITS = [\n    \"B\",\n    \"kiB\",\n    \"MiB\",\n    \"GiB\",\n    \"TiB\",\n    \"PiB\",\n    \"EiB\",\n    \"ZiB\",\n    \"YiB\"\n];\nconst BIT_UNITS = [\n    \"b\",\n    \"kbit\",\n    \"Mbit\",\n    \"Gbit\",\n    \"Tbit\",\n    \"Pbit\",\n    \"Ebit\",\n    \"Zbit\",\n    \"Ybit\"\n];\nconst BIBIT_UNITS = [\n    \"b\",\n    \"kibit\",\n    \"Mibit\",\n    \"Gibit\",\n    \"Tibit\",\n    \"Pibit\",\n    \"Eibit\",\n    \"Zibit\",\n    \"Yibit\"\n];\n/*\nFormats the given number using `Number#toLocaleString`.\n- If locale is a string, the value is expected to be a locale-key (for example: `de`).\n- If locale is true, the system default locale is used for translation.\n- If no value for locale is specified, the number is returned unmodified.\n*/ const toLocaleString = (number, locale, options)=>{\n    let result = number;\n    if (typeof locale === \"string\" || Array.isArray(locale)) {\n        result = number.toLocaleString(locale, options);\n    } else if (locale === true || options !== undefined) {\n        result = number.toLocaleString(undefined, options);\n    }\n    return result;\n};\nmodule.exports = (number, options)=>{\n    if (!Number.isFinite(number)) {\n        throw new TypeError(`Expected a finite number, got ${typeof number}: ${number}`);\n    }\n    options = Object.assign({\n        bits: false,\n        binary: false\n    }, options);\n    const UNITS = options.bits ? options.binary ? BIBIT_UNITS : BIT_UNITS : options.binary ? BIBYTE_UNITS : BYTE_UNITS;\n    if (options.signed && number === 0) {\n        return ` 0 ${UNITS[0]}`;\n    }\n    const isNegative = number < 0;\n    const prefix = isNegative ? \"-\" : options.signed ? \"+\" : \"\";\n    if (isNegative) {\n        number = -number;\n    }\n    let localeOptions;\n    if (options.minimumFractionDigits !== undefined) {\n        localeOptions = {\n            minimumFractionDigits: options.minimumFractionDigits\n        };\n    }\n    if (options.maximumFractionDigits !== undefined) {\n        localeOptions = Object.assign({\n            maximumFractionDigits: options.maximumFractionDigits\n        }, localeOptions);\n    }\n    if (number < 1) {\n        const numberString = toLocaleString(number, options.locale, localeOptions);\n        return prefix + numberString + \" \" + UNITS[0];\n    }\n    const exponent = Math.min(Math.floor(options.binary ? Math.log(number) / Math.log(1024) : Math.log10(number) / 3), UNITS.length - 1);\n    // eslint-disable-next-line unicorn/prefer-exponentiation-operator\n    number /= Math.pow(options.binary ? 1024 : 1000, exponent);\n    if (!localeOptions) {\n        number = number.toPrecision(3);\n    }\n    const numberString = toLocaleString(Number(number), options.locale, localeOptions);\n    const unit = UNITS[exponent];\n    return prefix + numberString + \" \" + unit;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcHJldHR5LWJ5dGVzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTUEsYUFBYTtJQUNsQjtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7Q0FDQTtBQUVELE1BQU1DLGVBQWU7SUFDcEI7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0NBQ0E7QUFFRCxNQUFNQyxZQUFZO0lBQ2pCO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtDQUNBO0FBRUQsTUFBTUMsY0FBYztJQUNuQjtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7Q0FDQTtBQUVEOzs7OztBQUtBLEdBQ0EsTUFBTUMsaUJBQWlCLENBQUNDLFFBQVFDLFFBQVFDO0lBQ3ZDLElBQUlDLFNBQVNIO0lBQ2IsSUFBSSxPQUFPQyxXQUFXLFlBQVlHLE1BQU1DLE9BQU8sQ0FBQ0osU0FBUztRQUN4REUsU0FBU0gsT0FBT0QsY0FBYyxDQUFDRSxRQUFRQztJQUN4QyxPQUFPLElBQUlELFdBQVcsUUFBUUMsWUFBWUksV0FBVztRQUNwREgsU0FBU0gsT0FBT0QsY0FBYyxDQUFDTyxXQUFXSjtJQUMzQztJQUVBLE9BQU9DO0FBQ1I7QUFFQUksT0FBT0MsT0FBTyxHQUFHLENBQUNSLFFBQVFFO0lBQ3pCLElBQUksQ0FBQ08sT0FBT0MsUUFBUSxDQUFDVixTQUFTO1FBQzdCLE1BQU0sSUFBSVcsVUFBVSxDQUFDLDhCQUE4QixFQUFFLE9BQU9YLE9BQU8sRUFBRSxFQUFFQSxPQUFPLENBQUM7SUFDaEY7SUFFQUUsVUFBVVUsT0FBT0MsTUFBTSxDQUFDO1FBQUNDLE1BQU07UUFBT0MsUUFBUTtJQUFLLEdBQUdiO0lBRXRELE1BQU1jLFFBQVFkLFFBQVFZLElBQUksR0FDeEJaLFFBQVFhLE1BQU0sR0FBR2pCLGNBQWNELFlBQy9CSyxRQUFRYSxNQUFNLEdBQUduQixlQUFlRDtJQUVsQyxJQUFJTyxRQUFRZSxNQUFNLElBQUlqQixXQUFXLEdBQUc7UUFDbkMsT0FBTyxDQUFDLEdBQUcsRUFBRWdCLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN4QjtJQUVBLE1BQU1FLGFBQWFsQixTQUFTO0lBQzVCLE1BQU1tQixTQUFTRCxhQUFhLE1BQU9oQixRQUFRZSxNQUFNLEdBQUcsTUFBTTtJQUUxRCxJQUFJQyxZQUFZO1FBQ2ZsQixTQUFTLENBQUNBO0lBQ1g7SUFFQSxJQUFJb0I7SUFFSixJQUFJbEIsUUFBUW1CLHFCQUFxQixLQUFLZixXQUFXO1FBQ2hEYyxnQkFBZ0I7WUFBQ0MsdUJBQXVCbkIsUUFBUW1CLHFCQUFxQjtRQUFBO0lBQ3RFO0lBRUEsSUFBSW5CLFFBQVFvQixxQkFBcUIsS0FBS2hCLFdBQVc7UUFDaERjLGdCQUFnQlIsT0FBT0MsTUFBTSxDQUFDO1lBQUNTLHVCQUF1QnBCLFFBQVFvQixxQkFBcUI7UUFBQSxHQUFHRjtJQUN2RjtJQUVBLElBQUlwQixTQUFTLEdBQUc7UUFDZixNQUFNdUIsZUFBZXhCLGVBQWVDLFFBQVFFLFFBQVFELE1BQU0sRUFBRW1CO1FBQzVELE9BQU9ELFNBQVNJLGVBQWUsTUFBTVAsS0FBSyxDQUFDLEVBQUU7SUFDOUM7SUFFQSxNQUFNUSxXQUFXQyxLQUFLQyxHQUFHLENBQUNELEtBQUtFLEtBQUssQ0FBQ3pCLFFBQVFhLE1BQU0sR0FBR1UsS0FBS0csR0FBRyxDQUFDNUIsVUFBVXlCLEtBQUtHLEdBQUcsQ0FBQyxRQUFRSCxLQUFLSSxLQUFLLENBQUM3QixVQUFVLElBQUlnQixNQUFNYyxNQUFNLEdBQUc7SUFDbEksa0VBQWtFO0lBQ2xFOUIsVUFBVXlCLEtBQUtNLEdBQUcsQ0FBQzdCLFFBQVFhLE1BQU0sR0FBRyxPQUFPLE1BQU1TO0lBRWpELElBQUksQ0FBQ0osZUFBZTtRQUNuQnBCLFNBQVNBLE9BQU9nQyxXQUFXLENBQUM7SUFDN0I7SUFFQSxNQUFNVCxlQUFleEIsZUFBZVUsT0FBT1QsU0FBU0UsUUFBUUQsTUFBTSxFQUFFbUI7SUFFcEUsTUFBTWEsT0FBT2pCLEtBQUssQ0FBQ1EsU0FBUztJQUU1QixPQUFPTCxTQUFTSSxlQUFlLE1BQU1VO0FBQ3RDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGljdGFjdG9lLy4vbm9kZV9tb2R1bGVzL3ByZXR0eS1ieXRlcy9pbmRleC5qcz8yZmJkIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgQllURV9VTklUUyA9IFtcblx0J0InLFxuXHQna0InLFxuXHQnTUInLFxuXHQnR0InLFxuXHQnVEInLFxuXHQnUEInLFxuXHQnRUInLFxuXHQnWkInLFxuXHQnWUInXG5dO1xuXG5jb25zdCBCSUJZVEVfVU5JVFMgPSBbXG5cdCdCJyxcblx0J2tpQicsXG5cdCdNaUInLFxuXHQnR2lCJyxcblx0J1RpQicsXG5cdCdQaUInLFxuXHQnRWlCJyxcblx0J1ppQicsXG5cdCdZaUInXG5dO1xuXG5jb25zdCBCSVRfVU5JVFMgPSBbXG5cdCdiJyxcblx0J2tiaXQnLFxuXHQnTWJpdCcsXG5cdCdHYml0Jyxcblx0J1RiaXQnLFxuXHQnUGJpdCcsXG5cdCdFYml0Jyxcblx0J1piaXQnLFxuXHQnWWJpdCdcbl07XG5cbmNvbnN0IEJJQklUX1VOSVRTID0gW1xuXHQnYicsXG5cdCdraWJpdCcsXG5cdCdNaWJpdCcsXG5cdCdHaWJpdCcsXG5cdCdUaWJpdCcsXG5cdCdQaWJpdCcsXG5cdCdFaWJpdCcsXG5cdCdaaWJpdCcsXG5cdCdZaWJpdCdcbl07XG5cbi8qXG5Gb3JtYXRzIHRoZSBnaXZlbiBudW1iZXIgdXNpbmcgYE51bWJlciN0b0xvY2FsZVN0cmluZ2AuXG4tIElmIGxvY2FsZSBpcyBhIHN0cmluZywgdGhlIHZhbHVlIGlzIGV4cGVjdGVkIHRvIGJlIGEgbG9jYWxlLWtleSAoZm9yIGV4YW1wbGU6IGBkZWApLlxuLSBJZiBsb2NhbGUgaXMgdHJ1ZSwgdGhlIHN5c3RlbSBkZWZhdWx0IGxvY2FsZSBpcyB1c2VkIGZvciB0cmFuc2xhdGlvbi5cbi0gSWYgbm8gdmFsdWUgZm9yIGxvY2FsZSBpcyBzcGVjaWZpZWQsIHRoZSBudW1iZXIgaXMgcmV0dXJuZWQgdW5tb2RpZmllZC5cbiovXG5jb25zdCB0b0xvY2FsZVN0cmluZyA9IChudW1iZXIsIGxvY2FsZSwgb3B0aW9ucykgPT4ge1xuXHRsZXQgcmVzdWx0ID0gbnVtYmVyO1xuXHRpZiAodHlwZW9mIGxvY2FsZSA9PT0gJ3N0cmluZycgfHwgQXJyYXkuaXNBcnJheShsb2NhbGUpKSB7XG5cdFx0cmVzdWx0ID0gbnVtYmVyLnRvTG9jYWxlU3RyaW5nKGxvY2FsZSwgb3B0aW9ucyk7XG5cdH0gZWxzZSBpZiAobG9jYWxlID09PSB0cnVlIHx8IG9wdGlvbnMgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJlc3VsdCA9IG51bWJlci50b0xvY2FsZVN0cmluZyh1bmRlZmluZWQsIG9wdGlvbnMpO1xuXHR9XG5cblx0cmV0dXJuIHJlc3VsdDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gKG51bWJlciwgb3B0aW9ucykgPT4ge1xuXHRpZiAoIU51bWJlci5pc0Zpbml0ZShudW1iZXIpKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcihgRXhwZWN0ZWQgYSBmaW5pdGUgbnVtYmVyLCBnb3QgJHt0eXBlb2YgbnVtYmVyfTogJHtudW1iZXJ9YCk7XG5cdH1cblxuXHRvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7Yml0czogZmFsc2UsIGJpbmFyeTogZmFsc2V9LCBvcHRpb25zKTtcblxuXHRjb25zdCBVTklUUyA9IG9wdGlvbnMuYml0cyA/XG5cdFx0KG9wdGlvbnMuYmluYXJ5ID8gQklCSVRfVU5JVFMgOiBCSVRfVU5JVFMpIDpcblx0XHQob3B0aW9ucy5iaW5hcnkgPyBCSUJZVEVfVU5JVFMgOiBCWVRFX1VOSVRTKTtcblxuXHRpZiAob3B0aW9ucy5zaWduZWQgJiYgbnVtYmVyID09PSAwKSB7XG5cdFx0cmV0dXJuIGAgMCAke1VOSVRTWzBdfWA7XG5cdH1cblxuXHRjb25zdCBpc05lZ2F0aXZlID0gbnVtYmVyIDwgMDtcblx0Y29uc3QgcHJlZml4ID0gaXNOZWdhdGl2ZSA/ICctJyA6IChvcHRpb25zLnNpZ25lZCA/ICcrJyA6ICcnKTtcblxuXHRpZiAoaXNOZWdhdGl2ZSkge1xuXHRcdG51bWJlciA9IC1udW1iZXI7XG5cdH1cblxuXHRsZXQgbG9jYWxlT3B0aW9ucztcblxuXHRpZiAob3B0aW9ucy5taW5pbXVtRnJhY3Rpb25EaWdpdHMgIT09IHVuZGVmaW5lZCkge1xuXHRcdGxvY2FsZU9wdGlvbnMgPSB7bWluaW11bUZyYWN0aW9uRGlnaXRzOiBvcHRpb25zLm1pbmltdW1GcmFjdGlvbkRpZ2l0c307XG5cdH1cblxuXHRpZiAob3B0aW9ucy5tYXhpbXVtRnJhY3Rpb25EaWdpdHMgIT09IHVuZGVmaW5lZCkge1xuXHRcdGxvY2FsZU9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHttYXhpbXVtRnJhY3Rpb25EaWdpdHM6IG9wdGlvbnMubWF4aW11bUZyYWN0aW9uRGlnaXRzfSwgbG9jYWxlT3B0aW9ucyk7XG5cdH1cblxuXHRpZiAobnVtYmVyIDwgMSkge1xuXHRcdGNvbnN0IG51bWJlclN0cmluZyA9IHRvTG9jYWxlU3RyaW5nKG51bWJlciwgb3B0aW9ucy5sb2NhbGUsIGxvY2FsZU9wdGlvbnMpO1xuXHRcdHJldHVybiBwcmVmaXggKyBudW1iZXJTdHJpbmcgKyAnICcgKyBVTklUU1swXTtcblx0fVxuXG5cdGNvbnN0IGV4cG9uZW50ID0gTWF0aC5taW4oTWF0aC5mbG9vcihvcHRpb25zLmJpbmFyeSA/IE1hdGgubG9nKG51bWJlcikgLyBNYXRoLmxvZygxMDI0KSA6IE1hdGgubG9nMTAobnVtYmVyKSAvIDMpLCBVTklUUy5sZW5ndGggLSAxKTtcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHVuaWNvcm4vcHJlZmVyLWV4cG9uZW50aWF0aW9uLW9wZXJhdG9yXG5cdG51bWJlciAvPSBNYXRoLnBvdyhvcHRpb25zLmJpbmFyeSA/IDEwMjQgOiAxMDAwLCBleHBvbmVudCk7XG5cblx0aWYgKCFsb2NhbGVPcHRpb25zKSB7XG5cdFx0bnVtYmVyID0gbnVtYmVyLnRvUHJlY2lzaW9uKDMpO1xuXHR9XG5cblx0Y29uc3QgbnVtYmVyU3RyaW5nID0gdG9Mb2NhbGVTdHJpbmcoTnVtYmVyKG51bWJlciksIG9wdGlvbnMubG9jYWxlLCBsb2NhbGVPcHRpb25zKTtcblxuXHRjb25zdCB1bml0ID0gVU5JVFNbZXhwb25lbnRdO1xuXG5cdHJldHVybiBwcmVmaXggKyBudW1iZXJTdHJpbmcgKyAnICcgKyB1bml0O1xufTtcbiJdLCJuYW1lcyI6WyJCWVRFX1VOSVRTIiwiQklCWVRFX1VOSVRTIiwiQklUX1VOSVRTIiwiQklCSVRfVU5JVFMiLCJ0b0xvY2FsZVN0cmluZyIsIm51bWJlciIsImxvY2FsZSIsIm9wdGlvbnMiLCJyZXN1bHQiLCJBcnJheSIsImlzQXJyYXkiLCJ1bmRlZmluZWQiLCJtb2R1bGUiLCJleHBvcnRzIiwiTnVtYmVyIiwiaXNGaW5pdGUiLCJUeXBlRXJyb3IiLCJPYmplY3QiLCJhc3NpZ24iLCJiaXRzIiwiYmluYXJ5IiwiVU5JVFMiLCJzaWduZWQiLCJpc05lZ2F0aXZlIiwicHJlZml4IiwibG9jYWxlT3B0aW9ucyIsIm1pbmltdW1GcmFjdGlvbkRpZ2l0cyIsIm1heGltdW1GcmFjdGlvbkRpZ2l0cyIsIm51bWJlclN0cmluZyIsImV4cG9uZW50IiwiTWF0aCIsIm1pbiIsImZsb29yIiwibG9nIiwibG9nMTAiLCJsZW5ndGgiLCJwb3ciLCJ0b1ByZWNpc2lvbiIsInVuaXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pretty-bytes/index.js\n");

/***/ })

};
;