"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/i18next";
exports.ids = ["vendor-chunks/i18next"];
exports.modules = {

/***/ "(ssr)/./node_modules/i18next/dist/esm/i18next.js":
/*!**************************************************!*\
  !*** ./node_modules/i18next/dist/esm/i18next.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   changeLanguage: () => (/* binding */ changeLanguage),\n/* harmony export */   createInstance: () => (/* binding */ createInstance),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   exists: () => (/* binding */ exists),\n/* harmony export */   getFixedT: () => (/* binding */ getFixedT),\n/* harmony export */   hasLoadedNamespace: () => (/* binding */ hasLoadedNamespace),\n/* harmony export */   init: () => (/* binding */ init),\n/* harmony export */   loadLanguages: () => (/* binding */ loadLanguages),\n/* harmony export */   loadNamespaces: () => (/* binding */ loadNamespaces),\n/* harmony export */   loadResources: () => (/* binding */ loadResources),\n/* harmony export */   reloadResources: () => (/* binding */ reloadResources),\n/* harmony export */   setDefaultNamespace: () => (/* binding */ setDefaultNamespace),\n/* harmony export */   t: () => (/* binding */ t),\n/* harmony export */   use: () => (/* binding */ use)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_esm_typeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/typeof */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/typeof.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/classCallCheck */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/esm/createClass */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/createClass.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/esm/assertThisInitialized */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/esm/inherits */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/inherits.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/esm/possibleConstructorReturn */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/esm/getPrototypeOf */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @babel/runtime/helpers/esm/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_toArray__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @babel/runtime/helpers/esm/toArray */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/toArray.js\");\n\n\n\n\n\n\n\n\n\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                (0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nvar consoleLogger = {\n    type: \"logger\",\n    log: function log(args) {\n        this.output(\"log\", args);\n    },\n    warn: function warn(args) {\n        this.output(\"warn\", args);\n    },\n    error: function error(args) {\n        this.output(\"error\", args);\n    },\n    output: function output(type, args) {\n        if (console && console[type]) console[type].apply(console, args);\n    }\n};\nvar Logger = function() {\n    function Logger(concreteLogger) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        (0,_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(this, Logger);\n        this.init(concreteLogger, options);\n    }\n    (0,_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(Logger, [\n        {\n            key: \"init\",\n            value: function init(concreteLogger) {\n                var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n                this.prefix = options.prefix || \"i18next:\";\n                this.logger = concreteLogger || consoleLogger;\n                this.options = options;\n                this.debug = options.debug;\n            }\n        },\n        {\n            key: \"setDebug\",\n            value: function setDebug(bool) {\n                this.debug = bool;\n            }\n        },\n        {\n            key: \"log\",\n            value: function log() {\n                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                    args[_key] = arguments[_key];\n                }\n                return this.forward(args, \"log\", \"\", true);\n            }\n        },\n        {\n            key: \"warn\",\n            value: function warn() {\n                for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++){\n                    args[_key2] = arguments[_key2];\n                }\n                return this.forward(args, \"warn\", \"\", true);\n            }\n        },\n        {\n            key: \"error\",\n            value: function error() {\n                for(var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++){\n                    args[_key3] = arguments[_key3];\n                }\n                return this.forward(args, \"error\", \"\");\n            }\n        },\n        {\n            key: \"deprecate\",\n            value: function deprecate() {\n                for(var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++){\n                    args[_key4] = arguments[_key4];\n                }\n                return this.forward(args, \"warn\", \"WARNING DEPRECATED: \", true);\n            }\n        },\n        {\n            key: \"forward\",\n            value: function forward(args, lvl, prefix, debugOnly) {\n                if (debugOnly && !this.debug) return null;\n                if (typeof args[0] === \"string\") args[0] = \"\".concat(prefix).concat(this.prefix, \" \").concat(args[0]);\n                return this.logger[lvl](args);\n            }\n        },\n        {\n            key: \"create\",\n            value: function create(moduleName) {\n                return new Logger(this.logger, _objectSpread(_objectSpread({}, {\n                    prefix: \"\".concat(this.prefix, \":\").concat(moduleName, \":\")\n                }), this.options));\n            }\n        },\n        {\n            key: \"clone\",\n            value: function clone(options) {\n                options = options || this.options;\n                options.prefix = options.prefix || this.prefix;\n                return new Logger(this.logger, options);\n            }\n        }\n    ]);\n    return Logger;\n}();\nvar baseLogger = new Logger();\nvar EventEmitter = function() {\n    function EventEmitter() {\n        (0,_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(this, EventEmitter);\n        this.observers = {};\n    }\n    (0,_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(EventEmitter, [\n        {\n            key: \"on\",\n            value: function on(events, listener) {\n                var _this = this;\n                events.split(\" \").forEach(function(event) {\n                    _this.observers[event] = _this.observers[event] || [];\n                    _this.observers[event].push(listener);\n                });\n                return this;\n            }\n        },\n        {\n            key: \"off\",\n            value: function off(event, listener) {\n                if (!this.observers[event]) return;\n                if (!listener) {\n                    delete this.observers[event];\n                    return;\n                }\n                this.observers[event] = this.observers[event].filter(function(l) {\n                    return l !== listener;\n                });\n            }\n        },\n        {\n            key: \"emit\",\n            value: function emit(event) {\n                for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n                    args[_key - 1] = arguments[_key];\n                }\n                if (this.observers[event]) {\n                    var cloned = [].concat(this.observers[event]);\n                    cloned.forEach(function(observer) {\n                        observer.apply(void 0, args);\n                    });\n                }\n                if (this.observers[\"*\"]) {\n                    var _cloned = [].concat(this.observers[\"*\"]);\n                    _cloned.forEach(function(observer) {\n                        observer.apply(observer, [\n                            event\n                        ].concat(args));\n                    });\n                }\n            }\n        }\n    ]);\n    return EventEmitter;\n}();\nfunction defer() {\n    var res;\n    var rej;\n    var promise = new Promise(function(resolve, reject) {\n        res = resolve;\n        rej = reject;\n    });\n    promise.resolve = res;\n    promise.reject = rej;\n    return promise;\n}\nfunction makeString(object) {\n    if (object == null) return \"\";\n    return \"\" + object;\n}\nfunction copy(a, s, t) {\n    a.forEach(function(m) {\n        if (s[m]) t[m] = s[m];\n    });\n}\nfunction getLastOfPath(object, path, Empty) {\n    function cleanKey(key) {\n        return key && key.indexOf(\"###\") > -1 ? key.replace(/###/g, \".\") : key;\n    }\n    function canNotTraverseDeeper() {\n        return !object || typeof object === \"string\";\n    }\n    var stack = typeof path !== \"string\" ? [].concat(path) : path.split(\".\");\n    while(stack.length > 1){\n        if (canNotTraverseDeeper()) return {};\n        var key = cleanKey(stack.shift());\n        if (!object[key] && Empty) object[key] = new Empty();\n        if (Object.prototype.hasOwnProperty.call(object, key)) {\n            object = object[key];\n        } else {\n            object = {};\n        }\n    }\n    if (canNotTraverseDeeper()) return {};\n    return {\n        obj: object,\n        k: cleanKey(stack.shift())\n    };\n}\nfunction setPath(object, path, newValue) {\n    var _getLastOfPath = getLastOfPath(object, path, Object), obj = _getLastOfPath.obj, k = _getLastOfPath.k;\n    obj[k] = newValue;\n}\nfunction pushPath(object, path, newValue, concat) {\n    var _getLastOfPath2 = getLastOfPath(object, path, Object), obj = _getLastOfPath2.obj, k = _getLastOfPath2.k;\n    obj[k] = obj[k] || [];\n    if (concat) obj[k] = obj[k].concat(newValue);\n    if (!concat) obj[k].push(newValue);\n}\nfunction getPath(object, path) {\n    var _getLastOfPath3 = getLastOfPath(object, path), obj = _getLastOfPath3.obj, k = _getLastOfPath3.k;\n    if (!obj) return undefined;\n    return obj[k];\n}\nfunction getPathWithDefaults(data, defaultData, key) {\n    var value = getPath(data, key);\n    if (value !== undefined) {\n        return value;\n    }\n    return getPath(defaultData, key);\n}\nfunction deepExtend(target, source, overwrite) {\n    for(var prop in source){\n        if (prop !== \"__proto__\" && prop !== \"constructor\") {\n            if (prop in target) {\n                if (typeof target[prop] === \"string\" || target[prop] instanceof String || typeof source[prop] === \"string\" || source[prop] instanceof String) {\n                    if (overwrite) target[prop] = source[prop];\n                } else {\n                    deepExtend(target[prop], source[prop], overwrite);\n                }\n            } else {\n                target[prop] = source[prop];\n            }\n        }\n    }\n    return target;\n}\nfunction regexEscape(str) {\n    return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n}\nvar _entityMap = {\n    \"&\": \"&amp;\",\n    \"<\": \"&lt;\",\n    \">\": \"&gt;\",\n    '\"': \"&quot;\",\n    \"'\": \"&#39;\",\n    \"/\": \"&#x2F;\"\n};\nfunction escape(data) {\n    if (typeof data === \"string\") {\n        return data.replace(/[&<>\"'\\/]/g, function(s) {\n            return _entityMap[s];\n        });\n    }\n    return data;\n}\nvar isIE10 =  false && 0;\nvar chars = [\n    \" \",\n    \",\",\n    \"?\",\n    \"!\",\n    \";\"\n];\nfunction looksLikeObjectPath(key, nsSeparator, keySeparator) {\n    nsSeparator = nsSeparator || \"\";\n    keySeparator = keySeparator || \"\";\n    var possibleChars = chars.filter(function(c) {\n        return nsSeparator.indexOf(c) < 0 && keySeparator.indexOf(c) < 0;\n    });\n    if (possibleChars.length === 0) return true;\n    var r = new RegExp(\"(\".concat(possibleChars.map(function(c) {\n        return c === \"?\" ? \"\\\\?\" : c;\n    }).join(\"|\"), \")\"));\n    var matched = !r.test(key);\n    if (!matched) {\n        var ki = key.indexOf(keySeparator);\n        if (ki > 0 && !r.test(key.substring(0, ki))) {\n            matched = true;\n        }\n    }\n    return matched;\n}\nfunction ownKeys$1(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread$1(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys$1(Object(source), true).forEach(function(key) {\n                (0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys$1(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = (0,_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = (0,_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return (0,_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(this, result);\n    };\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction deepFind(obj, path) {\n    var keySeparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \".\";\n    if (!obj) return undefined;\n    if (obj[path]) return obj[path];\n    var paths = path.split(keySeparator);\n    var current = obj;\n    for(var i = 0; i < paths.length; ++i){\n        if (!current) return undefined;\n        if (typeof current[paths[i]] === \"string\" && i + 1 < paths.length) {\n            return undefined;\n        }\n        if (current[paths[i]] === undefined) {\n            var j = 2;\n            var p = paths.slice(i, i + j).join(keySeparator);\n            var mix = current[p];\n            while(mix === undefined && paths.length > i + j){\n                j++;\n                p = paths.slice(i, i + j).join(keySeparator);\n                mix = current[p];\n            }\n            if (mix === undefined) return undefined;\n            if (mix === null) return null;\n            if (path.endsWith(p)) {\n                if (typeof mix === \"string\") return mix;\n                if (p && typeof mix[p] === \"string\") return mix[p];\n            }\n            var joinedPath = paths.slice(i + j).join(keySeparator);\n            if (joinedPath) return deepFind(mix, joinedPath, keySeparator);\n            return undefined;\n        }\n        current = current[paths[i]];\n    }\n    return current;\n}\nvar ResourceStore = function(_EventEmitter) {\n    (0,_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(ResourceStore, _EventEmitter);\n    var _super = _createSuper(ResourceStore);\n    function ResourceStore(data) {\n        var _this;\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n            ns: [\n                \"translation\"\n            ],\n            defaultNS: \"translation\"\n        };\n        (0,_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(this, ResourceStore);\n        _this = _super.call(this);\n        if (isIE10) {\n            EventEmitter.call((0,_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(_this));\n        }\n        _this.data = data || {};\n        _this.options = options;\n        if (_this.options.keySeparator === undefined) {\n            _this.options.keySeparator = \".\";\n        }\n        if (_this.options.ignoreJSONStructure === undefined) {\n            _this.options.ignoreJSONStructure = true;\n        }\n        return _this;\n    }\n    (0,_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(ResourceStore, [\n        {\n            key: \"addNamespaces\",\n            value: function addNamespaces(ns) {\n                if (this.options.ns.indexOf(ns) < 0) {\n                    this.options.ns.push(ns);\n                }\n            }\n        },\n        {\n            key: \"removeNamespaces\",\n            value: function removeNamespaces(ns) {\n                var index = this.options.ns.indexOf(ns);\n                if (index > -1) {\n                    this.options.ns.splice(index, 1);\n                }\n            }\n        },\n        {\n            key: \"getResource\",\n            value: function getResource(lng, ns, key) {\n                var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n                var keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;\n                var ignoreJSONStructure = options.ignoreJSONStructure !== undefined ? options.ignoreJSONStructure : this.options.ignoreJSONStructure;\n                var path = [\n                    lng,\n                    ns\n                ];\n                if (key && typeof key !== \"string\") path = path.concat(key);\n                if (key && typeof key === \"string\") path = path.concat(keySeparator ? key.split(keySeparator) : key);\n                if (lng.indexOf(\".\") > -1) {\n                    path = lng.split(\".\");\n                }\n                var result = getPath(this.data, path);\n                if (result || !ignoreJSONStructure || typeof key !== \"string\") return result;\n                return deepFind(this.data && this.data[lng] && this.data[lng][ns], key, keySeparator);\n            }\n        },\n        {\n            key: \"addResource\",\n            value: function addResource(lng, ns, key, value) {\n                var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {\n                    silent: false\n                };\n                var keySeparator = this.options.keySeparator;\n                if (keySeparator === undefined) keySeparator = \".\";\n                var path = [\n                    lng,\n                    ns\n                ];\n                if (key) path = path.concat(keySeparator ? key.split(keySeparator) : key);\n                if (lng.indexOf(\".\") > -1) {\n                    path = lng.split(\".\");\n                    value = ns;\n                    ns = path[1];\n                }\n                this.addNamespaces(ns);\n                setPath(this.data, path, value);\n                if (!options.silent) this.emit(\"added\", lng, ns, key, value);\n            }\n        },\n        {\n            key: \"addResources\",\n            value: function addResources(lng, ns, resources) {\n                var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n                    silent: false\n                };\n                for(var m in resources){\n                    if (typeof resources[m] === \"string\" || Object.prototype.toString.apply(resources[m]) === \"[object Array]\") this.addResource(lng, ns, m, resources[m], {\n                        silent: true\n                    });\n                }\n                if (!options.silent) this.emit(\"added\", lng, ns, resources);\n            }\n        },\n        {\n            key: \"addResourceBundle\",\n            value: function addResourceBundle(lng, ns, resources, deep, overwrite) {\n                var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {\n                    silent: false\n                };\n                var path = [\n                    lng,\n                    ns\n                ];\n                if (lng.indexOf(\".\") > -1) {\n                    path = lng.split(\".\");\n                    deep = resources;\n                    resources = ns;\n                    ns = path[1];\n                }\n                this.addNamespaces(ns);\n                var pack = getPath(this.data, path) || {};\n                if (deep) {\n                    deepExtend(pack, resources, overwrite);\n                } else {\n                    pack = _objectSpread$1(_objectSpread$1({}, pack), resources);\n                }\n                setPath(this.data, path, pack);\n                if (!options.silent) this.emit(\"added\", lng, ns, resources);\n            }\n        },\n        {\n            key: \"removeResourceBundle\",\n            value: function removeResourceBundle(lng, ns) {\n                if (this.hasResourceBundle(lng, ns)) {\n                    delete this.data[lng][ns];\n                }\n                this.removeNamespaces(ns);\n                this.emit(\"removed\", lng, ns);\n            }\n        },\n        {\n            key: \"hasResourceBundle\",\n            value: function hasResourceBundle(lng, ns) {\n                return this.getResource(lng, ns) !== undefined;\n            }\n        },\n        {\n            key: \"getResourceBundle\",\n            value: function getResourceBundle(lng, ns) {\n                if (!ns) ns = this.options.defaultNS;\n                if (this.options.compatibilityAPI === \"v1\") return _objectSpread$1(_objectSpread$1({}, {}), this.getResource(lng, ns));\n                return this.getResource(lng, ns);\n            }\n        },\n        {\n            key: \"getDataByLanguage\",\n            value: function getDataByLanguage(lng) {\n                return this.data[lng];\n            }\n        },\n        {\n            key: \"hasLanguageSomeTranslations\",\n            value: function hasLanguageSomeTranslations(lng) {\n                var data = this.getDataByLanguage(lng);\n                var n = data && Object.keys(data) || [];\n                return !!n.find(function(v) {\n                    return data[v] && Object.keys(data[v]).length > 0;\n                });\n            }\n        },\n        {\n            key: \"toJSON\",\n            value: function toJSON() {\n                return this.data;\n            }\n        }\n    ]);\n    return ResourceStore;\n}(EventEmitter);\nvar postProcessor = {\n    processors: {},\n    addPostProcessor: function addPostProcessor(module) {\n        this.processors[module.name] = module;\n    },\n    handle: function handle(processors, value, key, options, translator) {\n        var _this = this;\n        processors.forEach(function(processor) {\n            if (_this.processors[processor]) value = _this.processors[processor].process(value, key, options, translator);\n        });\n        return value;\n    }\n};\nfunction ownKeys$2(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread$2(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys$2(Object(source), true).forEach(function(key) {\n                (0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys$2(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _createSuper$1(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct$1();\n    return function _createSuperInternal() {\n        var Super = (0,_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = (0,_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return (0,_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(this, result);\n    };\n}\nfunction _isNativeReflectConstruct$1() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nvar checkedLoadedFor = {};\nvar Translator = function(_EventEmitter) {\n    (0,_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(Translator, _EventEmitter);\n    var _super = _createSuper$1(Translator);\n    function Translator(services) {\n        var _this;\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        (0,_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(this, Translator);\n        _this = _super.call(this);\n        if (isIE10) {\n            EventEmitter.call((0,_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(_this));\n        }\n        copy([\n            \"resourceStore\",\n            \"languageUtils\",\n            \"pluralResolver\",\n            \"interpolator\",\n            \"backendConnector\",\n            \"i18nFormat\",\n            \"utils\"\n        ], services, (0,_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(_this));\n        _this.options = options;\n        if (_this.options.keySeparator === undefined) {\n            _this.options.keySeparator = \".\";\n        }\n        _this.logger = baseLogger.create(\"translator\");\n        return _this;\n    }\n    (0,_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(Translator, [\n        {\n            key: \"changeLanguage\",\n            value: function changeLanguage(lng) {\n                if (lng) this.language = lng;\n            }\n        },\n        {\n            key: \"exists\",\n            value: function exists(key) {\n                var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n                    interpolation: {}\n                };\n                if (key === undefined || key === null) {\n                    return false;\n                }\n                var resolved = this.resolve(key, options);\n                return resolved && resolved.res !== undefined;\n            }\n        },\n        {\n            key: \"extractFromKey\",\n            value: function extractFromKey(key, options) {\n                var nsSeparator = options.nsSeparator !== undefined ? options.nsSeparator : this.options.nsSeparator;\n                if (nsSeparator === undefined) nsSeparator = \":\";\n                var keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;\n                var namespaces = options.ns || this.options.defaultNS || [];\n                var wouldCheckForNsInKey = nsSeparator && key.indexOf(nsSeparator) > -1;\n                var seemsNaturalLanguage = !this.options.userDefinedKeySeparator && !options.keySeparator && !this.options.userDefinedNsSeparator && !options.nsSeparator && !looksLikeObjectPath(key, nsSeparator, keySeparator);\n                if (wouldCheckForNsInKey && !seemsNaturalLanguage) {\n                    var m = key.match(this.interpolator.nestingRegexp);\n                    if (m && m.length > 0) {\n                        return {\n                            key: key,\n                            namespaces: namespaces\n                        };\n                    }\n                    var parts = key.split(nsSeparator);\n                    if (nsSeparator !== keySeparator || nsSeparator === keySeparator && this.options.ns.indexOf(parts[0]) > -1) namespaces = parts.shift();\n                    key = parts.join(keySeparator);\n                }\n                if (typeof namespaces === \"string\") namespaces = [\n                    namespaces\n                ];\n                return {\n                    key: key,\n                    namespaces: namespaces\n                };\n            }\n        },\n        {\n            key: \"translate\",\n            value: function translate(keys, options, lastKey) {\n                var _this2 = this;\n                if ((0,_babel_runtime_helpers_esm_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(options) !== \"object\" && this.options.overloadTranslationOptionHandler) {\n                    options = this.options.overloadTranslationOptionHandler(arguments);\n                }\n                if (!options) options = {};\n                if (keys === undefined || keys === null) return \"\";\n                if (!Array.isArray(keys)) keys = [\n                    String(keys)\n                ];\n                var returnDetails = options.returnDetails !== undefined ? options.returnDetails : this.options.returnDetails;\n                var keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;\n                var _this$extractFromKey = this.extractFromKey(keys[keys.length - 1], options), key = _this$extractFromKey.key, namespaces = _this$extractFromKey.namespaces;\n                var namespace = namespaces[namespaces.length - 1];\n                var lng = options.lng || this.language;\n                var appendNamespaceToCIMode = options.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;\n                if (lng && lng.toLowerCase() === \"cimode\") {\n                    if (appendNamespaceToCIMode) {\n                        var nsSeparator = options.nsSeparator || this.options.nsSeparator;\n                        if (returnDetails) {\n                            resolved.res = \"\".concat(namespace).concat(nsSeparator).concat(key);\n                            return resolved;\n                        }\n                        return \"\".concat(namespace).concat(nsSeparator).concat(key);\n                    }\n                    if (returnDetails) {\n                        resolved.res = key;\n                        return resolved;\n                    }\n                    return key;\n                }\n                var resolved = this.resolve(keys, options);\n                var res = resolved && resolved.res;\n                var resUsedKey = resolved && resolved.usedKey || key;\n                var resExactUsedKey = resolved && resolved.exactUsedKey || key;\n                var resType = Object.prototype.toString.apply(res);\n                var noObject = [\n                    \"[object Number]\",\n                    \"[object Function]\",\n                    \"[object RegExp]\"\n                ];\n                var joinArrays = options.joinArrays !== undefined ? options.joinArrays : this.options.joinArrays;\n                var handleAsObjectInI18nFormat = !this.i18nFormat || this.i18nFormat.handleAsObject;\n                var handleAsObject = typeof res !== \"string\" && typeof res !== \"boolean\" && typeof res !== \"number\";\n                if (handleAsObjectInI18nFormat && res && handleAsObject && noObject.indexOf(resType) < 0 && !(typeof joinArrays === \"string\" && resType === \"[object Array]\")) {\n                    if (!options.returnObjects && !this.options.returnObjects) {\n                        if (!this.options.returnedObjectHandler) {\n                            this.logger.warn(\"accessing an object - but returnObjects options is not enabled!\");\n                        }\n                        var r = this.options.returnedObjectHandler ? this.options.returnedObjectHandler(resUsedKey, res, _objectSpread$2(_objectSpread$2({}, options), {}, {\n                            ns: namespaces\n                        })) : \"key '\".concat(key, \" (\").concat(this.language, \")' returned an object instead of string.\");\n                        if (returnDetails) {\n                            resolved.res = r;\n                            return resolved;\n                        }\n                        return r;\n                    }\n                    if (keySeparator) {\n                        var resTypeIsArray = resType === \"[object Array]\";\n                        var copy = resTypeIsArray ? [] : {};\n                        var newKeyToUse = resTypeIsArray ? resExactUsedKey : resUsedKey;\n                        for(var m in res){\n                            if (Object.prototype.hasOwnProperty.call(res, m)) {\n                                var deepKey = \"\".concat(newKeyToUse).concat(keySeparator).concat(m);\n                                copy[m] = this.translate(deepKey, _objectSpread$2(_objectSpread$2({}, options), {\n                                    joinArrays: false,\n                                    ns: namespaces\n                                }));\n                                if (copy[m] === deepKey) copy[m] = res[m];\n                            }\n                        }\n                        res = copy;\n                    }\n                } else if (handleAsObjectInI18nFormat && typeof joinArrays === \"string\" && resType === \"[object Array]\") {\n                    res = res.join(joinArrays);\n                    if (res) res = this.extendTranslation(res, keys, options, lastKey);\n                } else {\n                    var usedDefault = false;\n                    var usedKey = false;\n                    var needsPluralHandling = options.count !== undefined && typeof options.count !== \"string\";\n                    var hasDefaultValue = Translator.hasDefaultValue(options);\n                    var defaultValueSuffix = needsPluralHandling ? this.pluralResolver.getSuffix(lng, options.count, options) : \"\";\n                    var defaultValue = options[\"defaultValue\".concat(defaultValueSuffix)] || options.defaultValue;\n                    if (!this.isValidLookup(res) && hasDefaultValue) {\n                        usedDefault = true;\n                        res = defaultValue;\n                    }\n                    if (!this.isValidLookup(res)) {\n                        usedKey = true;\n                        res = key;\n                    }\n                    var missingKeyNoValueFallbackToKey = options.missingKeyNoValueFallbackToKey || this.options.missingKeyNoValueFallbackToKey;\n                    var resForMissing = missingKeyNoValueFallbackToKey && usedKey ? undefined : res;\n                    var updateMissing = hasDefaultValue && defaultValue !== res && this.options.updateMissing;\n                    if (usedKey || usedDefault || updateMissing) {\n                        this.logger.log(updateMissing ? \"updateKey\" : \"missingKey\", lng, namespace, key, updateMissing ? defaultValue : res);\n                        if (keySeparator) {\n                            var fk = this.resolve(key, _objectSpread$2(_objectSpread$2({}, options), {}, {\n                                keySeparator: false\n                            }));\n                            if (fk && fk.res) this.logger.warn(\"Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.\");\n                        }\n                        var lngs = [];\n                        var fallbackLngs = this.languageUtils.getFallbackCodes(this.options.fallbackLng, options.lng || this.language);\n                        if (this.options.saveMissingTo === \"fallback\" && fallbackLngs && fallbackLngs[0]) {\n                            for(var i = 0; i < fallbackLngs.length; i++){\n                                lngs.push(fallbackLngs[i]);\n                            }\n                        } else if (this.options.saveMissingTo === \"all\") {\n                            lngs = this.languageUtils.toResolveHierarchy(options.lng || this.language);\n                        } else {\n                            lngs.push(options.lng || this.language);\n                        }\n                        var send = function send(l, k, specificDefaultValue) {\n                            var defaultForMissing = hasDefaultValue && specificDefaultValue !== res ? specificDefaultValue : resForMissing;\n                            if (_this2.options.missingKeyHandler) {\n                                _this2.options.missingKeyHandler(l, namespace, k, defaultForMissing, updateMissing, options);\n                            } else if (_this2.backendConnector && _this2.backendConnector.saveMissing) {\n                                _this2.backendConnector.saveMissing(l, namespace, k, defaultForMissing, updateMissing, options);\n                            }\n                            _this2.emit(\"missingKey\", l, namespace, k, res);\n                        };\n                        if (this.options.saveMissing) {\n                            if (this.options.saveMissingPlurals && needsPluralHandling) {\n                                lngs.forEach(function(language) {\n                                    _this2.pluralResolver.getSuffixes(language, options).forEach(function(suffix) {\n                                        send([\n                                            language\n                                        ], key + suffix, options[\"defaultValue\".concat(suffix)] || defaultValue);\n                                    });\n                                });\n                            } else {\n                                send(lngs, key, defaultValue);\n                            }\n                        }\n                    }\n                    res = this.extendTranslation(res, keys, options, resolved, lastKey);\n                    if (usedKey && res === key && this.options.appendNamespaceToMissingKey) res = \"\".concat(namespace, \":\").concat(key);\n                    if ((usedKey || usedDefault) && this.options.parseMissingKeyHandler) {\n                        if (this.options.compatibilityAPI !== \"v1\") {\n                            res = this.options.parseMissingKeyHandler(this.options.appendNamespaceToMissingKey ? \"\".concat(namespace, \":\").concat(key) : key, usedDefault ? res : undefined);\n                        } else {\n                            res = this.options.parseMissingKeyHandler(res);\n                        }\n                    }\n                }\n                if (returnDetails) {\n                    resolved.res = res;\n                    return resolved;\n                }\n                return res;\n            }\n        },\n        {\n            key: \"extendTranslation\",\n            value: function extendTranslation(res, key, options, resolved, lastKey) {\n                var _this3 = this;\n                if (this.i18nFormat && this.i18nFormat.parse) {\n                    res = this.i18nFormat.parse(res, _objectSpread$2(_objectSpread$2({}, this.options.interpolation.defaultVariables), options), resolved.usedLng, resolved.usedNS, resolved.usedKey, {\n                        resolved: resolved\n                    });\n                } else if (!options.skipInterpolation) {\n                    if (options.interpolation) this.interpolator.init(_objectSpread$2(_objectSpread$2({}, options), {\n                        interpolation: _objectSpread$2(_objectSpread$2({}, this.options.interpolation), options.interpolation)\n                    }));\n                    var skipOnVariables = typeof res === \"string\" && (options && options.interpolation && options.interpolation.skipOnVariables !== undefined ? options.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables);\n                    var nestBef;\n                    if (skipOnVariables) {\n                        var nb = res.match(this.interpolator.nestingRegexp);\n                        nestBef = nb && nb.length;\n                    }\n                    var data = options.replace && typeof options.replace !== \"string\" ? options.replace : options;\n                    if (this.options.interpolation.defaultVariables) data = _objectSpread$2(_objectSpread$2({}, this.options.interpolation.defaultVariables), data);\n                    res = this.interpolator.interpolate(res, data, options.lng || this.language, options);\n                    if (skipOnVariables) {\n                        var na = res.match(this.interpolator.nestingRegexp);\n                        var nestAft = na && na.length;\n                        if (nestBef < nestAft) options.nest = false;\n                    }\n                    if (options.nest !== false) res = this.interpolator.nest(res, function() {\n                        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                            args[_key] = arguments[_key];\n                        }\n                        if (lastKey && lastKey[0] === args[0] && !options.context) {\n                            _this3.logger.warn(\"It seems you are nesting recursively key: \".concat(args[0], \" in key: \").concat(key[0]));\n                            return null;\n                        }\n                        return _this3.translate.apply(_this3, args.concat([\n                            key\n                        ]));\n                    }, options);\n                    if (options.interpolation) this.interpolator.reset();\n                }\n                var postProcess = options.postProcess || this.options.postProcess;\n                var postProcessorNames = typeof postProcess === \"string\" ? [\n                    postProcess\n                ] : postProcess;\n                if (res !== undefined && res !== null && postProcessorNames && postProcessorNames.length && options.applyPostProcessor !== false) {\n                    res = postProcessor.handle(postProcessorNames, res, key, this.options && this.options.postProcessPassResolved ? _objectSpread$2({\n                        i18nResolved: resolved\n                    }, options) : options, this);\n                }\n                return res;\n            }\n        },\n        {\n            key: \"resolve\",\n            value: function resolve(keys) {\n                var _this4 = this;\n                var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n                var found;\n                var usedKey;\n                var exactUsedKey;\n                var usedLng;\n                var usedNS;\n                if (typeof keys === \"string\") keys = [\n                    keys\n                ];\n                keys.forEach(function(k) {\n                    if (_this4.isValidLookup(found)) return;\n                    var extracted = _this4.extractFromKey(k, options);\n                    var key = extracted.key;\n                    usedKey = key;\n                    var namespaces = extracted.namespaces;\n                    if (_this4.options.fallbackNS) namespaces = namespaces.concat(_this4.options.fallbackNS);\n                    var needsPluralHandling = options.count !== undefined && typeof options.count !== \"string\";\n                    var needsZeroSuffixLookup = needsPluralHandling && !options.ordinal && options.count === 0 && _this4.pluralResolver.shouldUseIntlApi();\n                    var needsContextHandling = options.context !== undefined && (typeof options.context === \"string\" || typeof options.context === \"number\") && options.context !== \"\";\n                    var codes = options.lngs ? options.lngs : _this4.languageUtils.toResolveHierarchy(options.lng || _this4.language, options.fallbackLng);\n                    namespaces.forEach(function(ns) {\n                        if (_this4.isValidLookup(found)) return;\n                        usedNS = ns;\n                        if (!checkedLoadedFor[\"\".concat(codes[0], \"-\").concat(ns)] && _this4.utils && _this4.utils.hasLoadedNamespace && !_this4.utils.hasLoadedNamespace(usedNS)) {\n                            checkedLoadedFor[\"\".concat(codes[0], \"-\").concat(ns)] = true;\n                            _this4.logger.warn('key \"'.concat(usedKey, '\" for languages \"').concat(codes.join(\", \"), '\" won\\'t get resolved as namespace \"').concat(usedNS, '\" was not yet loaded'), \"This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!\");\n                        }\n                        codes.forEach(function(code) {\n                            if (_this4.isValidLookup(found)) return;\n                            usedLng = code;\n                            var finalKeys = [\n                                key\n                            ];\n                            if (_this4.i18nFormat && _this4.i18nFormat.addLookupKeys) {\n                                _this4.i18nFormat.addLookupKeys(finalKeys, key, code, ns, options);\n                            } else {\n                                var pluralSuffix;\n                                if (needsPluralHandling) pluralSuffix = _this4.pluralResolver.getSuffix(code, options.count, options);\n                                var zeroSuffix = \"\".concat(_this4.options.pluralSeparator, \"zero\");\n                                if (needsPluralHandling) {\n                                    finalKeys.push(key + pluralSuffix);\n                                    if (needsZeroSuffixLookup) {\n                                        finalKeys.push(key + zeroSuffix);\n                                    }\n                                }\n                                if (needsContextHandling) {\n                                    var contextKey = \"\".concat(key).concat(_this4.options.contextSeparator).concat(options.context);\n                                    finalKeys.push(contextKey);\n                                    if (needsPluralHandling) {\n                                        finalKeys.push(contextKey + pluralSuffix);\n                                        if (needsZeroSuffixLookup) {\n                                            finalKeys.push(contextKey + zeroSuffix);\n                                        }\n                                    }\n                                }\n                            }\n                            var possibleKey;\n                            while(possibleKey = finalKeys.pop()){\n                                if (!_this4.isValidLookup(found)) {\n                                    exactUsedKey = possibleKey;\n                                    found = _this4.getResource(code, ns, possibleKey, options);\n                                }\n                            }\n                        });\n                    });\n                });\n                return {\n                    res: found,\n                    usedKey: usedKey,\n                    exactUsedKey: exactUsedKey,\n                    usedLng: usedLng,\n                    usedNS: usedNS\n                };\n            }\n        },\n        {\n            key: \"isValidLookup\",\n            value: function isValidLookup(res) {\n                return res !== undefined && !(!this.options.returnNull && res === null) && !(!this.options.returnEmptyString && res === \"\");\n            }\n        },\n        {\n            key: \"getResource\",\n            value: function getResource(code, ns, key) {\n                var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n                if (this.i18nFormat && this.i18nFormat.getResource) return this.i18nFormat.getResource(code, ns, key, options);\n                return this.resourceStore.getResource(code, ns, key, options);\n            }\n        }\n    ], [\n        {\n            key: \"hasDefaultValue\",\n            value: function hasDefaultValue(options) {\n                var prefix = \"defaultValue\";\n                for(var option in options){\n                    if (Object.prototype.hasOwnProperty.call(options, option) && prefix === option.substring(0, prefix.length) && undefined !== options[option]) {\n                        return true;\n                    }\n                }\n                return false;\n            }\n        }\n    ]);\n    return Translator;\n}(EventEmitter);\nfunction capitalize(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\nvar LanguageUtil = function() {\n    function LanguageUtil(options) {\n        (0,_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(this, LanguageUtil);\n        this.options = options;\n        this.supportedLngs = this.options.supportedLngs || false;\n        this.logger = baseLogger.create(\"languageUtils\");\n    }\n    (0,_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(LanguageUtil, [\n        {\n            key: \"getScriptPartFromCode\",\n            value: function getScriptPartFromCode(code) {\n                if (!code || code.indexOf(\"-\") < 0) return null;\n                var p = code.split(\"-\");\n                if (p.length === 2) return null;\n                p.pop();\n                if (p[p.length - 1].toLowerCase() === \"x\") return null;\n                return this.formatLanguageCode(p.join(\"-\"));\n            }\n        },\n        {\n            key: \"getLanguagePartFromCode\",\n            value: function getLanguagePartFromCode(code) {\n                if (!code || code.indexOf(\"-\") < 0) return code;\n                var p = code.split(\"-\");\n                return this.formatLanguageCode(p[0]);\n            }\n        },\n        {\n            key: \"formatLanguageCode\",\n            value: function formatLanguageCode(code) {\n                if (typeof code === \"string\" && code.indexOf(\"-\") > -1) {\n                    var specialCases = [\n                        \"hans\",\n                        \"hant\",\n                        \"latn\",\n                        \"cyrl\",\n                        \"cans\",\n                        \"mong\",\n                        \"arab\"\n                    ];\n                    var p = code.split(\"-\");\n                    if (this.options.lowerCaseLng) {\n                        p = p.map(function(part) {\n                            return part.toLowerCase();\n                        });\n                    } else if (p.length === 2) {\n                        p[0] = p[0].toLowerCase();\n                        p[1] = p[1].toUpperCase();\n                        if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize(p[1].toLowerCase());\n                    } else if (p.length === 3) {\n                        p[0] = p[0].toLowerCase();\n                        if (p[1].length === 2) p[1] = p[1].toUpperCase();\n                        if (p[0] !== \"sgn\" && p[2].length === 2) p[2] = p[2].toUpperCase();\n                        if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize(p[1].toLowerCase());\n                        if (specialCases.indexOf(p[2].toLowerCase()) > -1) p[2] = capitalize(p[2].toLowerCase());\n                    }\n                    return p.join(\"-\");\n                }\n                return this.options.cleanCode || this.options.lowerCaseLng ? code.toLowerCase() : code;\n            }\n        },\n        {\n            key: \"isSupportedCode\",\n            value: function isSupportedCode(code) {\n                if (this.options.load === \"languageOnly\" || this.options.nonExplicitSupportedLngs) {\n                    code = this.getLanguagePartFromCode(code);\n                }\n                return !this.supportedLngs || !this.supportedLngs.length || this.supportedLngs.indexOf(code) > -1;\n            }\n        },\n        {\n            key: \"getBestMatchFromCodes\",\n            value: function getBestMatchFromCodes(codes) {\n                var _this = this;\n                if (!codes) return null;\n                var found;\n                codes.forEach(function(code) {\n                    if (found) return;\n                    var cleanedLng = _this.formatLanguageCode(code);\n                    if (!_this.options.supportedLngs || _this.isSupportedCode(cleanedLng)) found = cleanedLng;\n                });\n                if (!found && this.options.supportedLngs) {\n                    codes.forEach(function(code) {\n                        if (found) return;\n                        var lngOnly = _this.getLanguagePartFromCode(code);\n                        if (_this.isSupportedCode(lngOnly)) return found = lngOnly;\n                        found = _this.options.supportedLngs.find(function(supportedLng) {\n                            if (supportedLng.indexOf(lngOnly) === 0) return supportedLng;\n                        });\n                    });\n                }\n                if (!found) found = this.getFallbackCodes(this.options.fallbackLng)[0];\n                return found;\n            }\n        },\n        {\n            key: \"getFallbackCodes\",\n            value: function getFallbackCodes(fallbacks, code) {\n                if (!fallbacks) return [];\n                if (typeof fallbacks === \"function\") fallbacks = fallbacks(code);\n                if (typeof fallbacks === \"string\") fallbacks = [\n                    fallbacks\n                ];\n                if (Object.prototype.toString.apply(fallbacks) === \"[object Array]\") return fallbacks;\n                if (!code) return fallbacks[\"default\"] || [];\n                var found = fallbacks[code];\n                if (!found) found = fallbacks[this.getScriptPartFromCode(code)];\n                if (!found) found = fallbacks[this.formatLanguageCode(code)];\n                if (!found) found = fallbacks[this.getLanguagePartFromCode(code)];\n                if (!found) found = fallbacks[\"default\"];\n                return found || [];\n            }\n        },\n        {\n            key: \"toResolveHierarchy\",\n            value: function toResolveHierarchy(code, fallbackCode) {\n                var _this2 = this;\n                var fallbackCodes = this.getFallbackCodes(fallbackCode || this.options.fallbackLng || [], code);\n                var codes = [];\n                var addCode = function addCode(c) {\n                    if (!c) return;\n                    if (_this2.isSupportedCode(c)) {\n                        codes.push(c);\n                    } else {\n                        _this2.logger.warn(\"rejecting language code not found in supportedLngs: \".concat(c));\n                    }\n                };\n                if (typeof code === \"string\" && code.indexOf(\"-\") > -1) {\n                    if (this.options.load !== \"languageOnly\") addCode(this.formatLanguageCode(code));\n                    if (this.options.load !== \"languageOnly\" && this.options.load !== \"currentOnly\") addCode(this.getScriptPartFromCode(code));\n                    if (this.options.load !== \"currentOnly\") addCode(this.getLanguagePartFromCode(code));\n                } else if (typeof code === \"string\") {\n                    addCode(this.formatLanguageCode(code));\n                }\n                fallbackCodes.forEach(function(fc) {\n                    if (codes.indexOf(fc) < 0) addCode(_this2.formatLanguageCode(fc));\n                });\n                return codes;\n            }\n        }\n    ]);\n    return LanguageUtil;\n}();\nvar sets = [\n    {\n        lngs: [\n            \"ach\",\n            \"ak\",\n            \"am\",\n            \"arn\",\n            \"br\",\n            \"fil\",\n            \"gun\",\n            \"ln\",\n            \"mfe\",\n            \"mg\",\n            \"mi\",\n            \"oc\",\n            \"pt\",\n            \"pt-BR\",\n            \"tg\",\n            \"tl\",\n            \"ti\",\n            \"tr\",\n            \"uz\",\n            \"wa\"\n        ],\n        nr: [\n            1,\n            2\n        ],\n        fc: 1\n    },\n    {\n        lngs: [\n            \"af\",\n            \"an\",\n            \"ast\",\n            \"az\",\n            \"bg\",\n            \"bn\",\n            \"ca\",\n            \"da\",\n            \"de\",\n            \"dev\",\n            \"el\",\n            \"en\",\n            \"eo\",\n            \"es\",\n            \"et\",\n            \"eu\",\n            \"fi\",\n            \"fo\",\n            \"fur\",\n            \"fy\",\n            \"gl\",\n            \"gu\",\n            \"ha\",\n            \"hi\",\n            \"hu\",\n            \"hy\",\n            \"ia\",\n            \"it\",\n            \"kk\",\n            \"kn\",\n            \"ku\",\n            \"lb\",\n            \"mai\",\n            \"ml\",\n            \"mn\",\n            \"mr\",\n            \"nah\",\n            \"nap\",\n            \"nb\",\n            \"ne\",\n            \"nl\",\n            \"nn\",\n            \"no\",\n            \"nso\",\n            \"pa\",\n            \"pap\",\n            \"pms\",\n            \"ps\",\n            \"pt-PT\",\n            \"rm\",\n            \"sco\",\n            \"se\",\n            \"si\",\n            \"so\",\n            \"son\",\n            \"sq\",\n            \"sv\",\n            \"sw\",\n            \"ta\",\n            \"te\",\n            \"tk\",\n            \"ur\",\n            \"yo\"\n        ],\n        nr: [\n            1,\n            2\n        ],\n        fc: 2\n    },\n    {\n        lngs: [\n            \"ay\",\n            \"bo\",\n            \"cgg\",\n            \"fa\",\n            \"ht\",\n            \"id\",\n            \"ja\",\n            \"jbo\",\n            \"ka\",\n            \"km\",\n            \"ko\",\n            \"ky\",\n            \"lo\",\n            \"ms\",\n            \"sah\",\n            \"su\",\n            \"th\",\n            \"tt\",\n            \"ug\",\n            \"vi\",\n            \"wo\",\n            \"zh\"\n        ],\n        nr: [\n            1\n        ],\n        fc: 3\n    },\n    {\n        lngs: [\n            \"be\",\n            \"bs\",\n            \"cnr\",\n            \"dz\",\n            \"hr\",\n            \"ru\",\n            \"sr\",\n            \"uk\"\n        ],\n        nr: [\n            1,\n            2,\n            5\n        ],\n        fc: 4\n    },\n    {\n        lngs: [\n            \"ar\"\n        ],\n        nr: [\n            0,\n            1,\n            2,\n            3,\n            11,\n            100\n        ],\n        fc: 5\n    },\n    {\n        lngs: [\n            \"cs\",\n            \"sk\"\n        ],\n        nr: [\n            1,\n            2,\n            5\n        ],\n        fc: 6\n    },\n    {\n        lngs: [\n            \"csb\",\n            \"pl\"\n        ],\n        nr: [\n            1,\n            2,\n            5\n        ],\n        fc: 7\n    },\n    {\n        lngs: [\n            \"cy\"\n        ],\n        nr: [\n            1,\n            2,\n            3,\n            8\n        ],\n        fc: 8\n    },\n    {\n        lngs: [\n            \"fr\"\n        ],\n        nr: [\n            1,\n            2\n        ],\n        fc: 9\n    },\n    {\n        lngs: [\n            \"ga\"\n        ],\n        nr: [\n            1,\n            2,\n            3,\n            7,\n            11\n        ],\n        fc: 10\n    },\n    {\n        lngs: [\n            \"gd\"\n        ],\n        nr: [\n            1,\n            2,\n            3,\n            20\n        ],\n        fc: 11\n    },\n    {\n        lngs: [\n            \"is\"\n        ],\n        nr: [\n            1,\n            2\n        ],\n        fc: 12\n    },\n    {\n        lngs: [\n            \"jv\"\n        ],\n        nr: [\n            0,\n            1\n        ],\n        fc: 13\n    },\n    {\n        lngs: [\n            \"kw\"\n        ],\n        nr: [\n            1,\n            2,\n            3,\n            4\n        ],\n        fc: 14\n    },\n    {\n        lngs: [\n            \"lt\"\n        ],\n        nr: [\n            1,\n            2,\n            10\n        ],\n        fc: 15\n    },\n    {\n        lngs: [\n            \"lv\"\n        ],\n        nr: [\n            1,\n            2,\n            0\n        ],\n        fc: 16\n    },\n    {\n        lngs: [\n            \"mk\"\n        ],\n        nr: [\n            1,\n            2\n        ],\n        fc: 17\n    },\n    {\n        lngs: [\n            \"mnk\"\n        ],\n        nr: [\n            0,\n            1,\n            2\n        ],\n        fc: 18\n    },\n    {\n        lngs: [\n            \"mt\"\n        ],\n        nr: [\n            1,\n            2,\n            11,\n            20\n        ],\n        fc: 19\n    },\n    {\n        lngs: [\n            \"or\"\n        ],\n        nr: [\n            2,\n            1\n        ],\n        fc: 2\n    },\n    {\n        lngs: [\n            \"ro\"\n        ],\n        nr: [\n            1,\n            2,\n            20\n        ],\n        fc: 20\n    },\n    {\n        lngs: [\n            \"sl\"\n        ],\n        nr: [\n            5,\n            1,\n            2,\n            3\n        ],\n        fc: 21\n    },\n    {\n        lngs: [\n            \"he\",\n            \"iw\"\n        ],\n        nr: [\n            1,\n            2,\n            20,\n            21\n        ],\n        fc: 22\n    }\n];\nvar _rulesPluralsTypes = {\n    1: function _(n) {\n        return Number(n > 1);\n    },\n    2: function _(n) {\n        return Number(n != 1);\n    },\n    3: function _(n) {\n        return 0;\n    },\n    4: function _(n) {\n        return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);\n    },\n    5: function _(n) {\n        return Number(n == 0 ? 0 : n == 1 ? 1 : n == 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5);\n    },\n    6: function _(n) {\n        return Number(n == 1 ? 0 : n >= 2 && n <= 4 ? 1 : 2);\n    },\n    7: function _(n) {\n        return Number(n == 1 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);\n    },\n    8: function _(n) {\n        return Number(n == 1 ? 0 : n == 2 ? 1 : n != 8 && n != 11 ? 2 : 3);\n    },\n    9: function _(n) {\n        return Number(n >= 2);\n    },\n    10: function _(n) {\n        return Number(n == 1 ? 0 : n == 2 ? 1 : n < 7 ? 2 : n < 11 ? 3 : 4);\n    },\n    11: function _(n) {\n        return Number(n == 1 || n == 11 ? 0 : n == 2 || n == 12 ? 1 : n > 2 && n < 20 ? 2 : 3);\n    },\n    12: function _(n) {\n        return Number(n % 10 != 1 || n % 100 == 11);\n    },\n    13: function _(n) {\n        return Number(n !== 0);\n    },\n    14: function _(n) {\n        return Number(n == 1 ? 0 : n == 2 ? 1 : n == 3 ? 2 : 3);\n    },\n    15: function _(n) {\n        return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);\n    },\n    16: function _(n) {\n        return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n !== 0 ? 1 : 2);\n    },\n    17: function _(n) {\n        return Number(n == 1 || n % 10 == 1 && n % 100 != 11 ? 0 : 1);\n    },\n    18: function _(n) {\n        return Number(n == 0 ? 0 : n == 1 ? 1 : 2);\n    },\n    19: function _(n) {\n        return Number(n == 1 ? 0 : n == 0 || n % 100 > 1 && n % 100 < 11 ? 1 : n % 100 > 10 && n % 100 < 20 ? 2 : 3);\n    },\n    20: function _(n) {\n        return Number(n == 1 ? 0 : n == 0 || n % 100 > 0 && n % 100 < 20 ? 1 : 2);\n    },\n    21: function _(n) {\n        return Number(n % 100 == 1 ? 1 : n % 100 == 2 ? 2 : n % 100 == 3 || n % 100 == 4 ? 3 : 0);\n    },\n    22: function _(n) {\n        return Number(n == 1 ? 0 : n == 2 ? 1 : (n < 0 || n > 10) && n % 10 == 0 ? 2 : 3);\n    }\n};\nvar deprecatedJsonVersions = [\n    \"v1\",\n    \"v2\",\n    \"v3\"\n];\nvar suffixesOrder = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    few: 3,\n    many: 4,\n    other: 5\n};\nfunction createRules() {\n    var rules = {};\n    sets.forEach(function(set) {\n        set.lngs.forEach(function(l) {\n            rules[l] = {\n                numbers: set.nr,\n                plurals: _rulesPluralsTypes[set.fc]\n            };\n        });\n    });\n    return rules;\n}\nvar PluralResolver = function() {\n    function PluralResolver(languageUtils) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        (0,_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(this, PluralResolver);\n        this.languageUtils = languageUtils;\n        this.options = options;\n        this.logger = baseLogger.create(\"pluralResolver\");\n        if ((!this.options.compatibilityJSON || this.options.compatibilityJSON === \"v4\") && (typeof Intl === \"undefined\" || !Intl.PluralRules)) {\n            this.options.compatibilityJSON = \"v3\";\n            this.logger.error(\"Your environment seems not to be Intl API compatible, use an Intl.PluralRules polyfill. Will fallback to the compatibilityJSON v3 format handling.\");\n        }\n        this.rules = createRules();\n    }\n    (0,_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(PluralResolver, [\n        {\n            key: \"addRule\",\n            value: function addRule(lng, obj) {\n                this.rules[lng] = obj;\n            }\n        },\n        {\n            key: \"getRule\",\n            value: function getRule(code) {\n                var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n                if (this.shouldUseIntlApi()) {\n                    try {\n                        return new Intl.PluralRules(code, {\n                            type: options.ordinal ? \"ordinal\" : \"cardinal\"\n                        });\n                    } catch (_unused) {\n                        return;\n                    }\n                }\n                return this.rules[code] || this.rules[this.languageUtils.getLanguagePartFromCode(code)];\n            }\n        },\n        {\n            key: \"needsPlural\",\n            value: function needsPlural(code) {\n                var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n                var rule = this.getRule(code, options);\n                if (this.shouldUseIntlApi()) {\n                    return rule && rule.resolvedOptions().pluralCategories.length > 1;\n                }\n                return rule && rule.numbers.length > 1;\n            }\n        },\n        {\n            key: \"getPluralFormsOfKey\",\n            value: function getPluralFormsOfKey(code, key) {\n                var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n                return this.getSuffixes(code, options).map(function(suffix) {\n                    return \"\".concat(key).concat(suffix);\n                });\n            }\n        },\n        {\n            key: \"getSuffixes\",\n            value: function getSuffixes(code) {\n                var _this = this;\n                var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n                var rule = this.getRule(code, options);\n                if (!rule) {\n                    return [];\n                }\n                if (this.shouldUseIntlApi()) {\n                    return rule.resolvedOptions().pluralCategories.sort(function(pluralCategory1, pluralCategory2) {\n                        return suffixesOrder[pluralCategory1] - suffixesOrder[pluralCategory2];\n                    }).map(function(pluralCategory) {\n                        return \"\".concat(_this.options.prepend).concat(pluralCategory);\n                    });\n                }\n                return rule.numbers.map(function(number) {\n                    return _this.getSuffix(code, number, options);\n                });\n            }\n        },\n        {\n            key: \"getSuffix\",\n            value: function getSuffix(code, count) {\n                var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n                var rule = this.getRule(code, options);\n                if (rule) {\n                    if (this.shouldUseIntlApi()) {\n                        return \"\".concat(this.options.prepend).concat(rule.select(count));\n                    }\n                    return this.getSuffixRetroCompatible(rule, count);\n                }\n                this.logger.warn(\"no plural rule found for: \".concat(code));\n                return \"\";\n            }\n        },\n        {\n            key: \"getSuffixRetroCompatible\",\n            value: function getSuffixRetroCompatible(rule, count) {\n                var _this2 = this;\n                var idx = rule.noAbs ? rule.plurals(count) : rule.plurals(Math.abs(count));\n                var suffix = rule.numbers[idx];\n                if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {\n                    if (suffix === 2) {\n                        suffix = \"plural\";\n                    } else if (suffix === 1) {\n                        suffix = \"\";\n                    }\n                }\n                var returnSuffix = function returnSuffix() {\n                    return _this2.options.prepend && suffix.toString() ? _this2.options.prepend + suffix.toString() : suffix.toString();\n                };\n                if (this.options.compatibilityJSON === \"v1\") {\n                    if (suffix === 1) return \"\";\n                    if (typeof suffix === \"number\") return \"_plural_\".concat(suffix.toString());\n                    return returnSuffix();\n                } else if (this.options.compatibilityJSON === \"v2\") {\n                    return returnSuffix();\n                } else if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {\n                    return returnSuffix();\n                }\n                return this.options.prepend && idx.toString() ? this.options.prepend + idx.toString() : idx.toString();\n            }\n        },\n        {\n            key: \"shouldUseIntlApi\",\n            value: function shouldUseIntlApi() {\n                return !deprecatedJsonVersions.includes(this.options.compatibilityJSON);\n            }\n        }\n    ]);\n    return PluralResolver;\n}();\nfunction ownKeys$3(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread$3(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys$3(Object(source), true).forEach(function(key) {\n                (0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys$3(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nvar Interpolator = function() {\n    function Interpolator() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        (0,_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(this, Interpolator);\n        this.logger = baseLogger.create(\"interpolator\");\n        this.options = options;\n        this.format = options.interpolation && options.interpolation.format || function(value) {\n            return value;\n        };\n        this.init(options);\n    }\n    (0,_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(Interpolator, [\n        {\n            key: \"init\",\n            value: function init() {\n                var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n                if (!options.interpolation) options.interpolation = {\n                    escapeValue: true\n                };\n                var iOpts = options.interpolation;\n                this.escape = iOpts.escape !== undefined ? iOpts.escape : escape;\n                this.escapeValue = iOpts.escapeValue !== undefined ? iOpts.escapeValue : true;\n                this.useRawValueToEscape = iOpts.useRawValueToEscape !== undefined ? iOpts.useRawValueToEscape : false;\n                this.prefix = iOpts.prefix ? regexEscape(iOpts.prefix) : iOpts.prefixEscaped || \"{{\";\n                this.suffix = iOpts.suffix ? regexEscape(iOpts.suffix) : iOpts.suffixEscaped || \"}}\";\n                this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || \",\";\n                this.unescapePrefix = iOpts.unescapeSuffix ? \"\" : iOpts.unescapePrefix || \"-\";\n                this.unescapeSuffix = this.unescapePrefix ? \"\" : iOpts.unescapeSuffix || \"\";\n                this.nestingPrefix = iOpts.nestingPrefix ? regexEscape(iOpts.nestingPrefix) : iOpts.nestingPrefixEscaped || regexEscape(\"$t(\");\n                this.nestingSuffix = iOpts.nestingSuffix ? regexEscape(iOpts.nestingSuffix) : iOpts.nestingSuffixEscaped || regexEscape(\")\");\n                this.nestingOptionsSeparator = iOpts.nestingOptionsSeparator ? iOpts.nestingOptionsSeparator : iOpts.nestingOptionsSeparator || \",\";\n                this.maxReplaces = iOpts.maxReplaces ? iOpts.maxReplaces : 1000;\n                this.alwaysFormat = iOpts.alwaysFormat !== undefined ? iOpts.alwaysFormat : false;\n                this.resetRegExp();\n            }\n        },\n        {\n            key: \"reset\",\n            value: function reset() {\n                if (this.options) this.init(this.options);\n            }\n        },\n        {\n            key: \"resetRegExp\",\n            value: function resetRegExp() {\n                var regexpStr = \"\".concat(this.prefix, \"(.+?)\").concat(this.suffix);\n                this.regexp = new RegExp(regexpStr, \"g\");\n                var regexpUnescapeStr = \"\".concat(this.prefix).concat(this.unescapePrefix, \"(.+?)\").concat(this.unescapeSuffix).concat(this.suffix);\n                this.regexpUnescape = new RegExp(regexpUnescapeStr, \"g\");\n                var nestingRegexpStr = \"\".concat(this.nestingPrefix, \"(.+?)\").concat(this.nestingSuffix);\n                this.nestingRegexp = new RegExp(nestingRegexpStr, \"g\");\n            }\n        },\n        {\n            key: \"interpolate\",\n            value: function interpolate(str, data, lng, options) {\n                var _this = this;\n                var match;\n                var value;\n                var replaces;\n                var defaultData = this.options && this.options.interpolation && this.options.interpolation.defaultVariables || {};\n                function regexSafe(val) {\n                    return val.replace(/\\$/g, \"$$$$\");\n                }\n                var handleFormat = function handleFormat(key) {\n                    if (key.indexOf(_this.formatSeparator) < 0) {\n                        var path = getPathWithDefaults(data, defaultData, key);\n                        return _this.alwaysFormat ? _this.format(path, undefined, lng, _objectSpread$3(_objectSpread$3(_objectSpread$3({}, options), data), {}, {\n                            interpolationkey: key\n                        })) : path;\n                    }\n                    var p = key.split(_this.formatSeparator);\n                    var k = p.shift().trim();\n                    var f = p.join(_this.formatSeparator).trim();\n                    return _this.format(getPathWithDefaults(data, defaultData, k), f, lng, _objectSpread$3(_objectSpread$3(_objectSpread$3({}, options), data), {}, {\n                        interpolationkey: k\n                    }));\n                };\n                this.resetRegExp();\n                var missingInterpolationHandler = options && options.missingInterpolationHandler || this.options.missingInterpolationHandler;\n                var skipOnVariables = options && options.interpolation && options.interpolation.skipOnVariables !== undefined ? options.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables;\n                var todos = [\n                    {\n                        regex: this.regexpUnescape,\n                        safeValue: function safeValue(val) {\n                            return regexSafe(val);\n                        }\n                    },\n                    {\n                        regex: this.regexp,\n                        safeValue: function safeValue(val) {\n                            return _this.escapeValue ? regexSafe(_this.escape(val)) : regexSafe(val);\n                        }\n                    }\n                ];\n                todos.forEach(function(todo) {\n                    replaces = 0;\n                    while(match = todo.regex.exec(str)){\n                        var matchedVar = match[1].trim();\n                        value = handleFormat(matchedVar);\n                        if (value === undefined) {\n                            if (typeof missingInterpolationHandler === \"function\") {\n                                var temp = missingInterpolationHandler(str, match, options);\n                                value = typeof temp === \"string\" ? temp : \"\";\n                            } else if (options && options.hasOwnProperty(matchedVar)) {\n                                value = \"\";\n                            } else if (skipOnVariables) {\n                                value = match[0];\n                                continue;\n                            } else {\n                                _this.logger.warn(\"missed to pass in variable \".concat(matchedVar, \" for interpolating \").concat(str));\n                                value = \"\";\n                            }\n                        } else if (typeof value !== \"string\" && !_this.useRawValueToEscape) {\n                            value = makeString(value);\n                        }\n                        var safeValue = todo.safeValue(value);\n                        str = str.replace(match[0], safeValue);\n                        if (skipOnVariables) {\n                            todo.regex.lastIndex += value.length;\n                            todo.regex.lastIndex -= match[0].length;\n                        } else {\n                            todo.regex.lastIndex = 0;\n                        }\n                        replaces++;\n                        if (replaces >= _this.maxReplaces) {\n                            break;\n                        }\n                    }\n                });\n                return str;\n            }\n        },\n        {\n            key: \"nest\",\n            value: function nest(str, fc) {\n                var _this2 = this;\n                var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n                var match;\n                var value;\n                var clonedOptions = _objectSpread$3({}, options);\n                clonedOptions.applyPostProcessor = false;\n                delete clonedOptions.defaultValue;\n                function handleHasOptions(key, inheritedOptions) {\n                    var sep = this.nestingOptionsSeparator;\n                    if (key.indexOf(sep) < 0) return key;\n                    var c = key.split(new RegExp(\"\".concat(sep, \"[ ]*{\")));\n                    var optionsString = \"{\".concat(c[1]);\n                    key = c[0];\n                    optionsString = this.interpolate(optionsString, clonedOptions);\n                    var matchedSingleQuotes = optionsString.match(/'/g);\n                    var matchedDoubleQuotes = optionsString.match(/\"/g);\n                    if (matchedSingleQuotes && matchedSingleQuotes.length % 2 === 0 && !matchedDoubleQuotes || matchedDoubleQuotes.length % 2 !== 0) {\n                        optionsString = optionsString.replace(/'/g, '\"');\n                    }\n                    try {\n                        clonedOptions = JSON.parse(optionsString);\n                        if (inheritedOptions) clonedOptions = _objectSpread$3(_objectSpread$3({}, inheritedOptions), clonedOptions);\n                    } catch (e) {\n                        this.logger.warn(\"failed parsing options string in nesting for key \".concat(key), e);\n                        return \"\".concat(key).concat(sep).concat(optionsString);\n                    }\n                    delete clonedOptions.defaultValue;\n                    return key;\n                }\n                while(match = this.nestingRegexp.exec(str)){\n                    var formatters = [];\n                    var doReduce = false;\n                    if (match[0].indexOf(this.formatSeparator) !== -1 && !/{.*}/.test(match[1])) {\n                        var r = match[1].split(this.formatSeparator).map(function(elem) {\n                            return elem.trim();\n                        });\n                        match[1] = r.shift();\n                        formatters = r;\n                        doReduce = true;\n                    }\n                    value = fc(handleHasOptions.call(this, match[1].trim(), clonedOptions), clonedOptions);\n                    if (value && match[0] === str && typeof value !== \"string\") return value;\n                    if (typeof value !== \"string\") value = makeString(value);\n                    if (!value) {\n                        this.logger.warn(\"missed to resolve \".concat(match[1], \" for nesting \").concat(str));\n                        value = \"\";\n                    }\n                    if (doReduce) {\n                        value = formatters.reduce(function(v, f) {\n                            return _this2.format(v, f, options.lng, _objectSpread$3(_objectSpread$3({}, options), {}, {\n                                interpolationkey: match[1].trim()\n                            }));\n                        }, value.trim());\n                    }\n                    str = str.replace(match[0], value);\n                    this.regexp.lastIndex = 0;\n                }\n                return str;\n            }\n        }\n    ]);\n    return Interpolator;\n}();\nfunction ownKeys$4(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread$4(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys$4(Object(source), true).forEach(function(key) {\n                (0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys$4(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction parseFormatStr(formatStr) {\n    var formatName = formatStr.toLowerCase().trim();\n    var formatOptions = {};\n    if (formatStr.indexOf(\"(\") > -1) {\n        var p = formatStr.split(\"(\");\n        formatName = p[0].toLowerCase().trim();\n        var optStr = p[1].substring(0, p[1].length - 1);\n        if (formatName === \"currency\" && optStr.indexOf(\":\") < 0) {\n            if (!formatOptions.currency) formatOptions.currency = optStr.trim();\n        } else if (formatName === \"relativetime\" && optStr.indexOf(\":\") < 0) {\n            if (!formatOptions.range) formatOptions.range = optStr.trim();\n        } else {\n            var opts = optStr.split(\";\");\n            opts.forEach(function(opt) {\n                if (!opt) return;\n                var _opt$split = opt.split(\":\"), _opt$split2 = (0,_babel_runtime_helpers_esm_toArray__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(_opt$split), key = _opt$split2[0], rest = _opt$split2.slice(1);\n                var val = rest.join(\":\").trim().replace(/^'+|'+$/g, \"\");\n                if (!formatOptions[key.trim()]) formatOptions[key.trim()] = val;\n                if (val === \"false\") formatOptions[key.trim()] = false;\n                if (val === \"true\") formatOptions[key.trim()] = true;\n                if (!isNaN(val)) formatOptions[key.trim()] = parseInt(val, 10);\n            });\n        }\n    }\n    return {\n        formatName: formatName,\n        formatOptions: formatOptions\n    };\n}\nfunction createCachedFormatter(fn) {\n    var cache = {};\n    return function invokeFormatter(val, lng, options) {\n        var key = lng + JSON.stringify(options);\n        var formatter = cache[key];\n        if (!formatter) {\n            formatter = fn(lng, options);\n            cache[key] = formatter;\n        }\n        return formatter(val);\n    };\n}\nvar Formatter = function() {\n    function Formatter() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        (0,_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(this, Formatter);\n        this.logger = baseLogger.create(\"formatter\");\n        this.options = options;\n        this.formats = {\n            number: createCachedFormatter(function(lng, options) {\n                var formatter = new Intl.NumberFormat(lng, options);\n                return function(val) {\n                    return formatter.format(val);\n                };\n            }),\n            currency: createCachedFormatter(function(lng, options) {\n                var formatter = new Intl.NumberFormat(lng, _objectSpread$4(_objectSpread$4({}, options), {}, {\n                    style: \"currency\"\n                }));\n                return function(val) {\n                    return formatter.format(val);\n                };\n            }),\n            datetime: createCachedFormatter(function(lng, options) {\n                var formatter = new Intl.DateTimeFormat(lng, _objectSpread$4({}, options));\n                return function(val) {\n                    return formatter.format(val);\n                };\n            }),\n            relativetime: createCachedFormatter(function(lng, options) {\n                var formatter = new Intl.RelativeTimeFormat(lng, _objectSpread$4({}, options));\n                return function(val) {\n                    return formatter.format(val, options.range || \"day\");\n                };\n            }),\n            list: createCachedFormatter(function(lng, options) {\n                var formatter = new Intl.ListFormat(lng, _objectSpread$4({}, options));\n                return function(val) {\n                    return formatter.format(val);\n                };\n            })\n        };\n        this.init(options);\n    }\n    (0,_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(Formatter, [\n        {\n            key: \"init\",\n            value: function init(services) {\n                var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n                    interpolation: {}\n                };\n                var iOpts = options.interpolation;\n                this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || \",\";\n            }\n        },\n        {\n            key: \"add\",\n            value: function add(name, fc) {\n                this.formats[name.toLowerCase().trim()] = fc;\n            }\n        },\n        {\n            key: \"addCached\",\n            value: function addCached(name, fc) {\n                this.formats[name.toLowerCase().trim()] = createCachedFormatter(fc);\n            }\n        },\n        {\n            key: \"format\",\n            value: function format(value, _format, lng, options) {\n                var _this = this;\n                var formats = _format.split(this.formatSeparator);\n                var result = formats.reduce(function(mem, f) {\n                    var _parseFormatStr = parseFormatStr(f), formatName = _parseFormatStr.formatName, formatOptions = _parseFormatStr.formatOptions;\n                    if (_this.formats[formatName]) {\n                        var formatted = mem;\n                        try {\n                            var valOptions = options && options.formatParams && options.formatParams[options.interpolationkey] || {};\n                            var l = valOptions.locale || valOptions.lng || options.locale || options.lng || lng;\n                            formatted = _this.formats[formatName](mem, l, _objectSpread$4(_objectSpread$4(_objectSpread$4({}, formatOptions), options), valOptions));\n                        } catch (error) {\n                            _this.logger.warn(error);\n                        }\n                        return formatted;\n                    } else {\n                        _this.logger.warn(\"there was no format function for \".concat(formatName));\n                    }\n                    return mem;\n                }, value);\n                return result;\n            }\n        }\n    ]);\n    return Formatter;\n}();\nfunction ownKeys$5(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread$5(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys$5(Object(source), true).forEach(function(key) {\n                (0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys$5(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _createSuper$2(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct$2();\n    return function _createSuperInternal() {\n        var Super = (0,_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = (0,_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return (0,_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(this, result);\n    };\n}\nfunction _isNativeReflectConstruct$2() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction removePending(q, name) {\n    if (q.pending[name] !== undefined) {\n        delete q.pending[name];\n        q.pendingCount--;\n    }\n}\nvar Connector = function(_EventEmitter) {\n    (0,_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(Connector, _EventEmitter);\n    var _super = _createSuper$2(Connector);\n    function Connector(backend, store, services) {\n        var _this;\n        var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n        (0,_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(this, Connector);\n        _this = _super.call(this);\n        if (isIE10) {\n            EventEmitter.call((0,_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(_this));\n        }\n        _this.backend = backend;\n        _this.store = store;\n        _this.services = services;\n        _this.languageUtils = services.languageUtils;\n        _this.options = options;\n        _this.logger = baseLogger.create(\"backendConnector\");\n        _this.waitingReads = [];\n        _this.maxParallelReads = options.maxParallelReads || 10;\n        _this.readingCalls = 0;\n        _this.maxRetries = options.maxRetries >= 0 ? options.maxRetries : 5;\n        _this.retryTimeout = options.retryTimeout >= 1 ? options.retryTimeout : 350;\n        _this.state = {};\n        _this.queue = [];\n        if (_this.backend && _this.backend.init) {\n            _this.backend.init(services, options.backend, options);\n        }\n        return _this;\n    }\n    (0,_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(Connector, [\n        {\n            key: \"queueLoad\",\n            value: function queueLoad(languages, namespaces, options, callback) {\n                var _this2 = this;\n                var toLoad = {};\n                var pending = {};\n                var toLoadLanguages = {};\n                var toLoadNamespaces = {};\n                languages.forEach(function(lng) {\n                    var hasAllNamespaces = true;\n                    namespaces.forEach(function(ns) {\n                        var name = \"\".concat(lng, \"|\").concat(ns);\n                        if (!options.reload && _this2.store.hasResourceBundle(lng, ns)) {\n                            _this2.state[name] = 2;\n                        } else if (_this2.state[name] < 0) ;\n                        else if (_this2.state[name] === 1) {\n                            if (pending[name] === undefined) pending[name] = true;\n                        } else {\n                            _this2.state[name] = 1;\n                            hasAllNamespaces = false;\n                            if (pending[name] === undefined) pending[name] = true;\n                            if (toLoad[name] === undefined) toLoad[name] = true;\n                            if (toLoadNamespaces[ns] === undefined) toLoadNamespaces[ns] = true;\n                        }\n                    });\n                    if (!hasAllNamespaces) toLoadLanguages[lng] = true;\n                });\n                if (Object.keys(toLoad).length || Object.keys(pending).length) {\n                    this.queue.push({\n                        pending: pending,\n                        pendingCount: Object.keys(pending).length,\n                        loaded: {},\n                        errors: [],\n                        callback: callback\n                    });\n                }\n                return {\n                    toLoad: Object.keys(toLoad),\n                    pending: Object.keys(pending),\n                    toLoadLanguages: Object.keys(toLoadLanguages),\n                    toLoadNamespaces: Object.keys(toLoadNamespaces)\n                };\n            }\n        },\n        {\n            key: \"loaded\",\n            value: function loaded(name, err, data) {\n                var s = name.split(\"|\");\n                var lng = s[0];\n                var ns = s[1];\n                if (err) this.emit(\"failedLoading\", lng, ns, err);\n                if (data) {\n                    this.store.addResourceBundle(lng, ns, data);\n                }\n                this.state[name] = err ? -1 : 2;\n                var loaded = {};\n                this.queue.forEach(function(q) {\n                    pushPath(q.loaded, [\n                        lng\n                    ], ns);\n                    removePending(q, name);\n                    if (err) q.errors.push(err);\n                    if (q.pendingCount === 0 && !q.done) {\n                        Object.keys(q.loaded).forEach(function(l) {\n                            if (!loaded[l]) loaded[l] = {};\n                            var loadedKeys = q.loaded[l];\n                            if (loadedKeys.length) {\n                                loadedKeys.forEach(function(ns) {\n                                    if (loaded[l][ns] === undefined) loaded[l][ns] = true;\n                                });\n                            }\n                        });\n                        q.done = true;\n                        if (q.errors.length) {\n                            q.callback(q.errors);\n                        } else {\n                            q.callback();\n                        }\n                    }\n                });\n                this.emit(\"loaded\", loaded);\n                this.queue = this.queue.filter(function(q) {\n                    return !q.done;\n                });\n            }\n        },\n        {\n            key: \"read\",\n            value: function read(lng, ns, fcName) {\n                var _this3 = this;\n                var tried = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n                var wait = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : this.retryTimeout;\n                var callback = arguments.length > 5 ? arguments[5] : undefined;\n                if (!lng.length) return callback(null, {});\n                if (this.readingCalls >= this.maxParallelReads) {\n                    this.waitingReads.push({\n                        lng: lng,\n                        ns: ns,\n                        fcName: fcName,\n                        tried: tried,\n                        wait: wait,\n                        callback: callback\n                    });\n                    return;\n                }\n                this.readingCalls++;\n                return this.backend[fcName](lng, ns, function(err, data) {\n                    _this3.readingCalls--;\n                    if (_this3.waitingReads.length > 0) {\n                        var next = _this3.waitingReads.shift();\n                        _this3.read(next.lng, next.ns, next.fcName, next.tried, next.wait, next.callback);\n                    }\n                    if (err && data && tried < _this3.maxRetries) {\n                        setTimeout(function() {\n                            _this3.read.call(_this3, lng, ns, fcName, tried + 1, wait * 2, callback);\n                        }, wait);\n                        return;\n                    }\n                    callback(err, data);\n                });\n            }\n        },\n        {\n            key: \"prepareLoading\",\n            value: function prepareLoading(languages, namespaces) {\n                var _this4 = this;\n                var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n                var callback = arguments.length > 3 ? arguments[3] : undefined;\n                if (!this.backend) {\n                    this.logger.warn(\"No backend was added via i18next.use. Will not load resources.\");\n                    return callback && callback();\n                }\n                if (typeof languages === \"string\") languages = this.languageUtils.toResolveHierarchy(languages);\n                if (typeof namespaces === \"string\") namespaces = [\n                    namespaces\n                ];\n                var toLoad = this.queueLoad(languages, namespaces, options, callback);\n                if (!toLoad.toLoad.length) {\n                    if (!toLoad.pending.length) callback();\n                    return null;\n                }\n                toLoad.toLoad.forEach(function(name) {\n                    _this4.loadOne(name);\n                });\n            }\n        },\n        {\n            key: \"load\",\n            value: function load(languages, namespaces, callback) {\n                this.prepareLoading(languages, namespaces, {}, callback);\n            }\n        },\n        {\n            key: \"reload\",\n            value: function reload(languages, namespaces, callback) {\n                this.prepareLoading(languages, namespaces, {\n                    reload: true\n                }, callback);\n            }\n        },\n        {\n            key: \"loadOne\",\n            value: function loadOne(name) {\n                var _this5 = this;\n                var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n                var s = name.split(\"|\");\n                var lng = s[0];\n                var ns = s[1];\n                this.read(lng, ns, \"read\", undefined, undefined, function(err, data) {\n                    if (err) _this5.logger.warn(\"\".concat(prefix, \"loading namespace \").concat(ns, \" for language \").concat(lng, \" failed\"), err);\n                    if (!err && data) _this5.logger.log(\"\".concat(prefix, \"loaded namespace \").concat(ns, \" for language \").concat(lng), data);\n                    _this5.loaded(name, err, data);\n                });\n            }\n        },\n        {\n            key: \"saveMissing\",\n            value: function saveMissing(languages, namespace, key, fallbackValue, isUpdate) {\n                var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n                if (this.services.utils && this.services.utils.hasLoadedNamespace && !this.services.utils.hasLoadedNamespace(namespace)) {\n                    this.logger.warn('did not save key \"'.concat(key, '\" as the namespace \"').concat(namespace, '\" was not yet loaded'), \"This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!\");\n                    return;\n                }\n                if (key === undefined || key === null || key === \"\") return;\n                if (this.backend && this.backend.create) {\n                    this.backend.create(languages, namespace, key, fallbackValue, null, _objectSpread$5(_objectSpread$5({}, options), {}, {\n                        isUpdate: isUpdate\n                    }));\n                }\n                if (!languages || !languages[0]) return;\n                this.store.addResource(languages[0], namespace, key, fallbackValue);\n            }\n        }\n    ]);\n    return Connector;\n}(EventEmitter);\nfunction get() {\n    return {\n        debug: false,\n        initImmediate: true,\n        ns: [\n            \"translation\"\n        ],\n        defaultNS: [\n            \"translation\"\n        ],\n        fallbackLng: [\n            \"dev\"\n        ],\n        fallbackNS: false,\n        supportedLngs: false,\n        nonExplicitSupportedLngs: false,\n        load: \"all\",\n        preload: false,\n        simplifyPluralSuffix: true,\n        keySeparator: \".\",\n        nsSeparator: \":\",\n        pluralSeparator: \"_\",\n        contextSeparator: \"_\",\n        partialBundledLanguages: false,\n        saveMissing: false,\n        updateMissing: false,\n        saveMissingTo: \"fallback\",\n        saveMissingPlurals: true,\n        missingKeyHandler: false,\n        missingInterpolationHandler: false,\n        postProcess: false,\n        postProcessPassResolved: false,\n        returnNull: true,\n        returnEmptyString: true,\n        returnObjects: false,\n        joinArrays: false,\n        returnedObjectHandler: false,\n        parseMissingKeyHandler: false,\n        appendNamespaceToMissingKey: false,\n        appendNamespaceToCIMode: false,\n        overloadTranslationOptionHandler: function handle(args) {\n            var ret = {};\n            if ((0,_babel_runtime_helpers_esm_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(args[1]) === \"object\") ret = args[1];\n            if (typeof args[1] === \"string\") ret.defaultValue = args[1];\n            if (typeof args[2] === \"string\") ret.tDescription = args[2];\n            if ((0,_babel_runtime_helpers_esm_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(args[2]) === \"object\" || (0,_babel_runtime_helpers_esm_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(args[3]) === \"object\") {\n                var options = args[3] || args[2];\n                Object.keys(options).forEach(function(key) {\n                    ret[key] = options[key];\n                });\n            }\n            return ret;\n        },\n        interpolation: {\n            escapeValue: true,\n            format: function format(value, _format, lng, options) {\n                return value;\n            },\n            prefix: \"{{\",\n            suffix: \"}}\",\n            formatSeparator: \",\",\n            unescapePrefix: \"-\",\n            nestingPrefix: \"$t(\",\n            nestingSuffix: \")\",\n            nestingOptionsSeparator: \",\",\n            maxReplaces: 1000,\n            skipOnVariables: true\n        }\n    };\n}\nfunction transformOptions(options) {\n    if (typeof options.ns === \"string\") options.ns = [\n        options.ns\n    ];\n    if (typeof options.fallbackLng === \"string\") options.fallbackLng = [\n        options.fallbackLng\n    ];\n    if (typeof options.fallbackNS === \"string\") options.fallbackNS = [\n        options.fallbackNS\n    ];\n    if (options.supportedLngs && options.supportedLngs.indexOf(\"cimode\") < 0) {\n        options.supportedLngs = options.supportedLngs.concat([\n            \"cimode\"\n        ]);\n    }\n    return options;\n}\nfunction ownKeys$6(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread$6(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys$6(Object(source), true).forEach(function(key) {\n                (0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys$6(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _createSuper$3(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct$3();\n    return function _createSuperInternal() {\n        var Super = (0,_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = (0,_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return (0,_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(this, result);\n    };\n}\nfunction _isNativeReflectConstruct$3() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction noop() {}\nfunction bindMemberFunctions(inst) {\n    var mems = Object.getOwnPropertyNames(Object.getPrototypeOf(inst));\n    mems.forEach(function(mem) {\n        if (typeof inst[mem] === \"function\") {\n            inst[mem] = inst[mem].bind(inst);\n        }\n    });\n}\nvar I18n = function(_EventEmitter) {\n    (0,_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(I18n, _EventEmitter);\n    var _super = _createSuper$3(I18n);\n    function I18n() {\n        var _this;\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var callback = arguments.length > 1 ? arguments[1] : undefined;\n        (0,_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(this, I18n);\n        _this = _super.call(this);\n        if (isIE10) {\n            EventEmitter.call((0,_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(_this));\n        }\n        _this.options = transformOptions(options);\n        _this.services = {};\n        _this.logger = baseLogger;\n        _this.modules = {\n            external: []\n        };\n        bindMemberFunctions((0,_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(_this));\n        if (callback && !_this.isInitialized && !options.isClone) {\n            if (!_this.options.initImmediate) {\n                _this.init(options, callback);\n                return (0,_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(_this, (0,_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(_this));\n            }\n            setTimeout(function() {\n                _this.init(options, callback);\n            }, 0);\n        }\n        return _this;\n    }\n    (0,_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(I18n, [\n        {\n            key: \"init\",\n            value: function init() {\n                var _this2 = this;\n                var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n                var callback = arguments.length > 1 ? arguments[1] : undefined;\n                if (typeof options === \"function\") {\n                    callback = options;\n                    options = {};\n                }\n                if (!options.defaultNS && options.defaultNS !== false && options.ns) {\n                    if (typeof options.ns === \"string\") {\n                        options.defaultNS = options.ns;\n                    } else if (options.ns.indexOf(\"translation\") < 0) {\n                        options.defaultNS = options.ns[0];\n                    }\n                }\n                var defOpts = get();\n                this.options = _objectSpread$6(_objectSpread$6(_objectSpread$6({}, defOpts), this.options), transformOptions(options));\n                if (this.options.compatibilityAPI !== \"v1\") {\n                    this.options.interpolation = _objectSpread$6(_objectSpread$6({}, defOpts.interpolation), this.options.interpolation);\n                }\n                if (options.keySeparator !== undefined) {\n                    this.options.userDefinedKeySeparator = options.keySeparator;\n                }\n                if (options.nsSeparator !== undefined) {\n                    this.options.userDefinedNsSeparator = options.nsSeparator;\n                }\n                function createClassOnDemand(ClassOrObject) {\n                    if (!ClassOrObject) return null;\n                    if (typeof ClassOrObject === \"function\") return new ClassOrObject();\n                    return ClassOrObject;\n                }\n                if (!this.options.isClone) {\n                    if (this.modules.logger) {\n                        baseLogger.init(createClassOnDemand(this.modules.logger), this.options);\n                    } else {\n                        baseLogger.init(null, this.options);\n                    }\n                    var formatter;\n                    if (this.modules.formatter) {\n                        formatter = this.modules.formatter;\n                    } else if (typeof Intl !== \"undefined\") {\n                        formatter = Formatter;\n                    }\n                    var lu = new LanguageUtil(this.options);\n                    this.store = new ResourceStore(this.options.resources, this.options);\n                    var s = this.services;\n                    s.logger = baseLogger;\n                    s.resourceStore = this.store;\n                    s.languageUtils = lu;\n                    s.pluralResolver = new PluralResolver(lu, {\n                        prepend: this.options.pluralSeparator,\n                        compatibilityJSON: this.options.compatibilityJSON,\n                        simplifyPluralSuffix: this.options.simplifyPluralSuffix\n                    });\n                    if (formatter && (!this.options.interpolation.format || this.options.interpolation.format === defOpts.interpolation.format)) {\n                        s.formatter = createClassOnDemand(formatter);\n                        s.formatter.init(s, this.options);\n                        this.options.interpolation.format = s.formatter.format.bind(s.formatter);\n                    }\n                    s.interpolator = new Interpolator(this.options);\n                    s.utils = {\n                        hasLoadedNamespace: this.hasLoadedNamespace.bind(this)\n                    };\n                    s.backendConnector = new Connector(createClassOnDemand(this.modules.backend), s.resourceStore, s, this.options);\n                    s.backendConnector.on(\"*\", function(event) {\n                        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n                            args[_key - 1] = arguments[_key];\n                        }\n                        _this2.emit.apply(_this2, [\n                            event\n                        ].concat(args));\n                    });\n                    if (this.modules.languageDetector) {\n                        s.languageDetector = createClassOnDemand(this.modules.languageDetector);\n                        s.languageDetector.init(s, this.options.detection, this.options);\n                    }\n                    if (this.modules.i18nFormat) {\n                        s.i18nFormat = createClassOnDemand(this.modules.i18nFormat);\n                        if (s.i18nFormat.init) s.i18nFormat.init(this);\n                    }\n                    this.translator = new Translator(this.services, this.options);\n                    this.translator.on(\"*\", function(event) {\n                        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){\n                            args[_key2 - 1] = arguments[_key2];\n                        }\n                        _this2.emit.apply(_this2, [\n                            event\n                        ].concat(args));\n                    });\n                    this.modules.external.forEach(function(m) {\n                        if (m.init) m.init(_this2);\n                    });\n                }\n                this.format = this.options.interpolation.format;\n                if (!callback) callback = noop;\n                if (this.options.fallbackLng && !this.services.languageDetector && !this.options.lng) {\n                    var codes = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);\n                    if (codes.length > 0 && codes[0] !== \"dev\") this.options.lng = codes[0];\n                }\n                if (!this.services.languageDetector && !this.options.lng) {\n                    this.logger.warn(\"init: no languageDetector is used and no lng is defined\");\n                }\n                var storeApi = [\n                    \"getResource\",\n                    \"hasResourceBundle\",\n                    \"getResourceBundle\",\n                    \"getDataByLanguage\"\n                ];\n                storeApi.forEach(function(fcName) {\n                    _this2[fcName] = function() {\n                        var _this2$store;\n                        return (_this2$store = _this2.store)[fcName].apply(_this2$store, arguments);\n                    };\n                });\n                var storeApiChained = [\n                    \"addResource\",\n                    \"addResources\",\n                    \"addResourceBundle\",\n                    \"removeResourceBundle\"\n                ];\n                storeApiChained.forEach(function(fcName) {\n                    _this2[fcName] = function() {\n                        var _this2$store2;\n                        (_this2$store2 = _this2.store)[fcName].apply(_this2$store2, arguments);\n                        return _this2;\n                    };\n                });\n                var deferred = defer();\n                var load = function load() {\n                    var finish = function finish(err, t) {\n                        if (_this2.isInitialized && !_this2.initializedStoreOnce) _this2.logger.warn(\"init: i18next is already initialized. You should call init just once!\");\n                        _this2.isInitialized = true;\n                        if (!_this2.options.isClone) _this2.logger.log(\"initialized\", _this2.options);\n                        _this2.emit(\"initialized\", _this2.options);\n                        deferred.resolve(t);\n                        callback(err, t);\n                    };\n                    if (_this2.languages && _this2.options.compatibilityAPI !== \"v1\" && !_this2.isInitialized) return finish(null, _this2.t.bind(_this2));\n                    _this2.changeLanguage(_this2.options.lng, finish);\n                };\n                if (this.options.resources || !this.options.initImmediate) {\n                    load();\n                } else {\n                    setTimeout(load, 0);\n                }\n                return deferred;\n            }\n        },\n        {\n            key: \"loadResources\",\n            value: function loadResources(language) {\n                var _this3 = this;\n                var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;\n                var usedCallback = callback;\n                var usedLng = typeof language === \"string\" ? language : this.language;\n                if (typeof language === \"function\") usedCallback = language;\n                if (!this.options.resources || this.options.partialBundledLanguages) {\n                    if (usedLng && usedLng.toLowerCase() === \"cimode\") return usedCallback();\n                    var toLoad = [];\n                    var append = function append(lng) {\n                        if (!lng) return;\n                        var lngs = _this3.services.languageUtils.toResolveHierarchy(lng);\n                        lngs.forEach(function(l) {\n                            if (toLoad.indexOf(l) < 0) toLoad.push(l);\n                        });\n                    };\n                    if (!usedLng) {\n                        var fallbacks = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);\n                        fallbacks.forEach(function(l) {\n                            return append(l);\n                        });\n                    } else {\n                        append(usedLng);\n                    }\n                    if (this.options.preload) {\n                        this.options.preload.forEach(function(l) {\n                            return append(l);\n                        });\n                    }\n                    this.services.backendConnector.load(toLoad, this.options.ns, function(e) {\n                        if (!e && !_this3.resolvedLanguage && _this3.language) _this3.setResolvedLanguage(_this3.language);\n                        usedCallback(e);\n                    });\n                } else {\n                    usedCallback(null);\n                }\n            }\n        },\n        {\n            key: \"reloadResources\",\n            value: function reloadResources(lngs, ns, callback) {\n                var deferred = defer();\n                if (!lngs) lngs = this.languages;\n                if (!ns) ns = this.options.ns;\n                if (!callback) callback = noop;\n                this.services.backendConnector.reload(lngs, ns, function(err) {\n                    deferred.resolve();\n                    callback(err);\n                });\n                return deferred;\n            }\n        },\n        {\n            key: \"use\",\n            value: function use(module) {\n                if (!module) throw new Error(\"You are passing an undefined module! Please check the object you are passing to i18next.use()\");\n                if (!module.type) throw new Error(\"You are passing a wrong module! Please check the object you are passing to i18next.use()\");\n                if (module.type === \"backend\") {\n                    this.modules.backend = module;\n                }\n                if (module.type === \"logger\" || module.log && module.warn && module.error) {\n                    this.modules.logger = module;\n                }\n                if (module.type === \"languageDetector\") {\n                    this.modules.languageDetector = module;\n                }\n                if (module.type === \"i18nFormat\") {\n                    this.modules.i18nFormat = module;\n                }\n                if (module.type === \"postProcessor\") {\n                    postProcessor.addPostProcessor(module);\n                }\n                if (module.type === \"formatter\") {\n                    this.modules.formatter = module;\n                }\n                if (module.type === \"3rdParty\") {\n                    this.modules.external.push(module);\n                }\n                return this;\n            }\n        },\n        {\n            key: \"setResolvedLanguage\",\n            value: function setResolvedLanguage(l) {\n                if (!l || !this.languages) return;\n                if ([\n                    \"cimode\",\n                    \"dev\"\n                ].indexOf(l) > -1) return;\n                for(var li = 0; li < this.languages.length; li++){\n                    var lngInLngs = this.languages[li];\n                    if ([\n                        \"cimode\",\n                        \"dev\"\n                    ].indexOf(lngInLngs) > -1) continue;\n                    if (this.store.hasLanguageSomeTranslations(lngInLngs)) {\n                        this.resolvedLanguage = lngInLngs;\n                        break;\n                    }\n                }\n            }\n        },\n        {\n            key: \"changeLanguage\",\n            value: function changeLanguage(lng, callback) {\n                var _this4 = this;\n                this.isLanguageChangingTo = lng;\n                var deferred = defer();\n                this.emit(\"languageChanging\", lng);\n                var setLngProps = function setLngProps(l) {\n                    _this4.language = l;\n                    _this4.languages = _this4.services.languageUtils.toResolveHierarchy(l);\n                    _this4.resolvedLanguage = undefined;\n                    _this4.setResolvedLanguage(l);\n                };\n                var done = function done(err, l) {\n                    if (l) {\n                        setLngProps(l);\n                        _this4.translator.changeLanguage(l);\n                        _this4.isLanguageChangingTo = undefined;\n                        _this4.emit(\"languageChanged\", l);\n                        _this4.logger.log(\"languageChanged\", l);\n                    } else {\n                        _this4.isLanguageChangingTo = undefined;\n                    }\n                    deferred.resolve(function() {\n                        return _this4.t.apply(_this4, arguments);\n                    });\n                    if (callback) callback(err, function() {\n                        return _this4.t.apply(_this4, arguments);\n                    });\n                };\n                var setLng = function setLng(lngs) {\n                    if (!lng && !lngs && _this4.services.languageDetector) lngs = [];\n                    var l = typeof lngs === \"string\" ? lngs : _this4.services.languageUtils.getBestMatchFromCodes(lngs);\n                    if (l) {\n                        if (!_this4.language) {\n                            setLngProps(l);\n                        }\n                        if (!_this4.translator.language) _this4.translator.changeLanguage(l);\n                        if (_this4.services.languageDetector) _this4.services.languageDetector.cacheUserLanguage(l);\n                    }\n                    _this4.loadResources(l, function(err) {\n                        done(err, l);\n                    });\n                };\n                if (!lng && this.services.languageDetector && !this.services.languageDetector.async) {\n                    setLng(this.services.languageDetector.detect());\n                } else if (!lng && this.services.languageDetector && this.services.languageDetector.async) {\n                    this.services.languageDetector.detect(setLng);\n                } else {\n                    setLng(lng);\n                }\n                return deferred;\n            }\n        },\n        {\n            key: \"getFixedT\",\n            value: function getFixedT(lng, ns, keyPrefix) {\n                var _this5 = this;\n                var fixedT = function fixedT(key, opts) {\n                    var options;\n                    if ((0,_babel_runtime_helpers_esm_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(opts) !== \"object\") {\n                        for(var _len3 = arguments.length, rest = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++){\n                            rest[_key3 - 2] = arguments[_key3];\n                        }\n                        options = _this5.options.overloadTranslationOptionHandler([\n                            key,\n                            opts\n                        ].concat(rest));\n                    } else {\n                        options = _objectSpread$6({}, opts);\n                    }\n                    options.lng = options.lng || fixedT.lng;\n                    options.lngs = options.lngs || fixedT.lngs;\n                    options.ns = options.ns || fixedT.ns;\n                    options.keyPrefix = options.keyPrefix || keyPrefix || fixedT.keyPrefix;\n                    var keySeparator = _this5.options.keySeparator || \".\";\n                    var resultKey = options.keyPrefix ? \"\".concat(options.keyPrefix).concat(keySeparator).concat(key) : key;\n                    return _this5.t(resultKey, options);\n                };\n                if (typeof lng === \"string\") {\n                    fixedT.lng = lng;\n                } else {\n                    fixedT.lngs = lng;\n                }\n                fixedT.ns = ns;\n                fixedT.keyPrefix = keyPrefix;\n                return fixedT;\n            }\n        },\n        {\n            key: \"t\",\n            value: function t() {\n                var _this$translator;\n                return this.translator && (_this$translator = this.translator).translate.apply(_this$translator, arguments);\n            }\n        },\n        {\n            key: \"exists\",\n            value: function exists() {\n                var _this$translator2;\n                return this.translator && (_this$translator2 = this.translator).exists.apply(_this$translator2, arguments);\n            }\n        },\n        {\n            key: \"setDefaultNamespace\",\n            value: function setDefaultNamespace(ns) {\n                this.options.defaultNS = ns;\n            }\n        },\n        {\n            key: \"hasLoadedNamespace\",\n            value: function hasLoadedNamespace(ns) {\n                var _this6 = this;\n                var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n                if (!this.isInitialized) {\n                    this.logger.warn(\"hasLoadedNamespace: i18next was not initialized\", this.languages);\n                    return false;\n                }\n                if (!this.languages || !this.languages.length) {\n                    this.logger.warn(\"hasLoadedNamespace: i18n.languages were undefined or empty\", this.languages);\n                    return false;\n                }\n                var lng = this.resolvedLanguage || this.languages[0];\n                var fallbackLng = this.options ? this.options.fallbackLng : false;\n                var lastLng = this.languages[this.languages.length - 1];\n                if (lng.toLowerCase() === \"cimode\") return true;\n                var loadNotPending = function loadNotPending(l, n) {\n                    var loadState = _this6.services.backendConnector.state[\"\".concat(l, \"|\").concat(n)];\n                    return loadState === -1 || loadState === 2;\n                };\n                if (options.precheck) {\n                    var preResult = options.precheck(this, loadNotPending);\n                    if (preResult !== undefined) return preResult;\n                }\n                if (this.hasResourceBundle(lng, ns)) return true;\n                if (!this.services.backendConnector.backend || this.options.resources && !this.options.partialBundledLanguages) return true;\n                if (loadNotPending(lng, ns) && (!fallbackLng || loadNotPending(lastLng, ns))) return true;\n                return false;\n            }\n        },\n        {\n            key: \"loadNamespaces\",\n            value: function loadNamespaces(ns, callback) {\n                var _this7 = this;\n                var deferred = defer();\n                if (!this.options.ns) {\n                    callback && callback();\n                    return Promise.resolve();\n                }\n                if (typeof ns === \"string\") ns = [\n                    ns\n                ];\n                ns.forEach(function(n) {\n                    if (_this7.options.ns.indexOf(n) < 0) _this7.options.ns.push(n);\n                });\n                this.loadResources(function(err) {\n                    deferred.resolve();\n                    if (callback) callback(err);\n                });\n                return deferred;\n            }\n        },\n        {\n            key: \"loadLanguages\",\n            value: function loadLanguages(lngs, callback) {\n                var deferred = defer();\n                if (typeof lngs === \"string\") lngs = [\n                    lngs\n                ];\n                var preloaded = this.options.preload || [];\n                var newLngs = lngs.filter(function(lng) {\n                    return preloaded.indexOf(lng) < 0;\n                });\n                if (!newLngs.length) {\n                    if (callback) callback();\n                    return Promise.resolve();\n                }\n                this.options.preload = preloaded.concat(newLngs);\n                this.loadResources(function(err) {\n                    deferred.resolve();\n                    if (callback) callback(err);\n                });\n                return deferred;\n            }\n        },\n        {\n            key: \"dir\",\n            value: function dir(lng) {\n                if (!lng) lng = this.resolvedLanguage || (this.languages && this.languages.length > 0 ? this.languages[0] : this.language);\n                if (!lng) return \"rtl\";\n                var rtlLngs = [\n                    \"ar\",\n                    \"shu\",\n                    \"sqr\",\n                    \"ssh\",\n                    \"xaa\",\n                    \"yhd\",\n                    \"yud\",\n                    \"aao\",\n                    \"abh\",\n                    \"abv\",\n                    \"acm\",\n                    \"acq\",\n                    \"acw\",\n                    \"acx\",\n                    \"acy\",\n                    \"adf\",\n                    \"ads\",\n                    \"aeb\",\n                    \"aec\",\n                    \"afb\",\n                    \"ajp\",\n                    \"apc\",\n                    \"apd\",\n                    \"arb\",\n                    \"arq\",\n                    \"ars\",\n                    \"ary\",\n                    \"arz\",\n                    \"auz\",\n                    \"avl\",\n                    \"ayh\",\n                    \"ayl\",\n                    \"ayn\",\n                    \"ayp\",\n                    \"bbz\",\n                    \"pga\",\n                    \"he\",\n                    \"iw\",\n                    \"ps\",\n                    \"pbt\",\n                    \"pbu\",\n                    \"pst\",\n                    \"prp\",\n                    \"prd\",\n                    \"ug\",\n                    \"ur\",\n                    \"ydd\",\n                    \"yds\",\n                    \"yih\",\n                    \"ji\",\n                    \"yi\",\n                    \"hbo\",\n                    \"men\",\n                    \"xmn\",\n                    \"fa\",\n                    \"jpr\",\n                    \"peo\",\n                    \"pes\",\n                    \"prs\",\n                    \"dv\",\n                    \"sam\",\n                    \"ckb\"\n                ];\n                return rtlLngs.indexOf(this.services.languageUtils.getLanguagePartFromCode(lng)) > -1 || lng.toLowerCase().indexOf(\"-arab\") > 1 ? \"rtl\" : \"ltr\";\n            }\n        },\n        {\n            key: \"cloneInstance\",\n            value: function cloneInstance() {\n                var _this8 = this;\n                var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n                var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;\n                var mergedOptions = _objectSpread$6(_objectSpread$6(_objectSpread$6({}, this.options), options), {\n                    isClone: true\n                });\n                var clone = new I18n(mergedOptions);\n                if (options.debug !== undefined || options.prefix !== undefined) {\n                    clone.logger = clone.logger.clone(options);\n                }\n                var membersToCopy = [\n                    \"store\",\n                    \"services\",\n                    \"language\"\n                ];\n                membersToCopy.forEach(function(m) {\n                    clone[m] = _this8[m];\n                });\n                clone.services = _objectSpread$6({}, this.services);\n                clone.services.utils = {\n                    hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)\n                };\n                clone.translator = new Translator(clone.services, clone.options);\n                clone.translator.on(\"*\", function(event) {\n                    for(var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++){\n                        args[_key4 - 1] = arguments[_key4];\n                    }\n                    clone.emit.apply(clone, [\n                        event\n                    ].concat(args));\n                });\n                clone.init(mergedOptions, callback);\n                clone.translator.options = clone.options;\n                clone.translator.backendConnector.services.utils = {\n                    hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)\n                };\n                return clone;\n            }\n        },\n        {\n            key: \"toJSON\",\n            value: function toJSON() {\n                return {\n                    options: this.options,\n                    store: this.store,\n                    language: this.language,\n                    languages: this.languages,\n                    resolvedLanguage: this.resolvedLanguage\n                };\n            }\n        }\n    ]);\n    return I18n;\n}(EventEmitter);\n(0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(I18n, \"createInstance\", function() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var callback = arguments.length > 1 ? arguments[1] : undefined;\n    return new I18n(options, callback);\n});\nvar instance = I18n.createInstance();\ninstance.createInstance = I18n.createInstance;\nvar createInstance = instance.createInstance;\nvar init = instance.init;\nvar loadResources = instance.loadResources;\nvar reloadResources = instance.reloadResources;\nvar use = instance.use;\nvar changeLanguage = instance.changeLanguage;\nvar getFixedT = instance.getFixedT;\nvar t = instance.t;\nvar exists = instance.exists;\nvar setDefaultNamespace = instance.setDefaultNamespace;\nvar hasLoadedNamespace = instance.hasLoadedNamespace;\nvar loadNamespaces = instance.loadNamespaces;\nvar loadLanguages = instance.loadLanguages;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (instance);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/i18next/dist/esm/i18next.js\n");

/***/ })

};
;