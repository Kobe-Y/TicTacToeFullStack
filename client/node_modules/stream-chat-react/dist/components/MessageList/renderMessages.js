import { __assign } from "tslib";
import React from 'react';
import { isDate } from '../../context';
import { CUSTOM_MESSAGE_TYPE } from '../../constants/messageTypes';
import { Message } from '../Message/Message';
export function defaultRenderMessages(_a) {
    var components = _a.components, customClasses = _a.customClasses, lastReceivedId = _a.lastReceivedMessageId, messageGroupStyles = _a.messageGroupStyles, messages = _a.messages, readData = _a.readData, messageProps = _a.sharedMessageProps;
    var DateSeparator = components.DateSeparator, HeaderComponent = components.HeaderComponent, MessageSystem = components.MessageSystem;
    return messages.map(function (message) {
        if (message.customType === CUSTOM_MESSAGE_TYPE.date &&
            message.date &&
            isDate(message.date) &&
            DateSeparator) {
            return (React.createElement("li", { key: "".concat(message.date.toISOString(), "-i") },
                React.createElement(DateSeparator, { date: message.date, formatDate: messageProps.formatDate, unread: message.unread })));
        }
        if (message.customType === CUSTOM_MESSAGE_TYPE.intro && HeaderComponent) {
            return (React.createElement("li", { key: 'intro' },
                React.createElement(HeaderComponent, null)));
        }
        if (message.type === 'system' && MessageSystem) {
            return (React.createElement("li", { key: message.id || message.created_at },
                React.createElement(MessageSystem, { message: message })));
        }
        var groupStyles = messageGroupStyles[message.id] || '';
        var messageClass = (customClasses === null || customClasses === void 0 ? void 0 : customClasses.message) || "str-chat__li str-chat__li--".concat(groupStyles);
        return (React.createElement("li", { className: messageClass, "data-message-id": message.id, "data-testid": messageClass, key: message.id || message.created_at },
            React.createElement(Message, __assign({ groupStyles: [groupStyles], lastReceivedId: lastReceivedId, message: message, readBy: readData[message.id] || [] }, messageProps))));
    });
}
